// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `nativeapi capi`.
///
/// Regenerate bindings with `dart run ffigen --config ffigen.yaml`.
///
class CNativeApiBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
  _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  CNativeApiBindings(ffi.DynamicLibrary dynamicLibrary)
    : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  CNativeApiBindings.fromLookup(
    ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) lookup,
  ) : _lookup = lookup;

  /// @brief Enables system accessibility features
  ///
  /// This function activates accessibility functionality across the system.
  /// The operation is idempotent - calling it multiple times has the same
  /// effect as calling it once.
  ///
  /// @note This operation may require system permissions depending on the
  /// platform implementation.
  void native_accessibility_manager_enable() {
    return _native_accessibility_manager_enable();
  }

  late final _native_accessibility_manager_enablePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
        'native_accessibility_manager_enable',
      );
  late final _native_accessibility_manager_enable =
      _native_accessibility_manager_enablePtr.asFunction<void Function()>();

  /// @brief Checks if accessibility features are currently enabled
  ///
  /// @return true if accessibility is enabled, false otherwise
  ///
  /// This function provides a quick way to query the current state of
  /// accessibility features without modifying the system state.
  bool native_accessibility_manager_is_enabled() {
    return _native_accessibility_manager_is_enabled();
  }

  late final _native_accessibility_manager_is_enabledPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>(
        'native_accessibility_manager_is_enabled',
      );
  late final _native_accessibility_manager_is_enabled =
      _native_accessibility_manager_is_enabledPtr.asFunction<bool Function()>();

  /// Window creation and destruction
  ffi.Pointer<native_window_options_t> native_window_options_create() {
    return _native_window_options_create();
  }

  late final _native_window_options_createPtr =
      _lookup<
        ffi.NativeFunction<ffi.Pointer<native_window_options_t> Function()>
      >('native_window_options_create');
  late final _native_window_options_create = _native_window_options_createPtr
      .asFunction<ffi.Pointer<native_window_options_t> Function()>();

  void native_window_options_destroy(
    ffi.Pointer<native_window_options_t> options,
  ) {
    return _native_window_options_destroy(options);
  }

  late final _native_window_options_destroyPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<native_window_options_t>)
        >
      >('native_window_options_destroy');
  late final _native_window_options_destroy = _native_window_options_destroyPtr
      .asFunction<void Function(ffi.Pointer<native_window_options_t>)>();

  bool native_window_options_set_title(
    ffi.Pointer<native_window_options_t> options,
    ffi.Pointer<ffi.Char> title,
  ) {
    return _native_window_options_set_title(options, title);
  }

  late final _native_window_options_set_titlePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Bool Function(
            ffi.Pointer<native_window_options_t>,
            ffi.Pointer<ffi.Char>,
          )
        >
      >('native_window_options_set_title');
  late final _native_window_options_set_title =
      _native_window_options_set_titlePtr
          .asFunction<
            bool Function(
              ffi.Pointer<native_window_options_t>,
              ffi.Pointer<ffi.Char>,
            )
          >();

  void native_window_options_set_size(
    ffi.Pointer<native_window_options_t> options,
    double width,
    double height,
  ) {
    return _native_window_options_set_size(options, width, height);
  }

  late final _native_window_options_set_sizePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<native_window_options_t>,
            ffi.Double,
            ffi.Double,
          )
        >
      >('native_window_options_set_size');
  late final _native_window_options_set_size =
      _native_window_options_set_sizePtr
          .asFunction<
            void Function(ffi.Pointer<native_window_options_t>, double, double)
          >();

  void native_window_options_set_minimum_size(
    ffi.Pointer<native_window_options_t> options,
    double width,
    double height,
  ) {
    return _native_window_options_set_minimum_size(options, width, height);
  }

  late final _native_window_options_set_minimum_sizePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<native_window_options_t>,
            ffi.Double,
            ffi.Double,
          )
        >
      >('native_window_options_set_minimum_size');
  late final _native_window_options_set_minimum_size =
      _native_window_options_set_minimum_sizePtr
          .asFunction<
            void Function(ffi.Pointer<native_window_options_t>, double, double)
          >();

  void native_window_options_set_maximum_size(
    ffi.Pointer<native_window_options_t> options,
    double width,
    double height,
  ) {
    return _native_window_options_set_maximum_size(options, width, height);
  }

  late final _native_window_options_set_maximum_sizePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<native_window_options_t>,
            ffi.Double,
            ffi.Double,
          )
        >
      >('native_window_options_set_maximum_size');
  late final _native_window_options_set_maximum_size =
      _native_window_options_set_maximum_sizePtr
          .asFunction<
            void Function(ffi.Pointer<native_window_options_t>, double, double)
          >();

  void native_window_options_set_centered(
    ffi.Pointer<native_window_options_t> options,
    bool centered,
  ) {
    return _native_window_options_set_centered(options, centered);
  }

  late final _native_window_options_set_centeredPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<native_window_options_t>, ffi.Bool)
        >
      >('native_window_options_set_centered');
  late final _native_window_options_set_centered =
      _native_window_options_set_centeredPtr
          .asFunction<
            void Function(ffi.Pointer<native_window_options_t>, bool)
          >();

  /// Window basic operations
  int native_window_get_id(native_window_t window) {
    return _native_window_get_id(window);
  }

  late final _native_window_get_idPtr =
      _lookup<ffi.NativeFunction<native_window_id_t Function(native_window_t)>>(
        'native_window_get_id',
      );
  late final _native_window_get_id = _native_window_get_idPtr
      .asFunction<int Function(native_window_t)>();

  void native_window_focus(native_window_t window) {
    return _native_window_focus(window);
  }

  late final _native_window_focusPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(native_window_t)>>(
        'native_window_focus',
      );
  late final _native_window_focus = _native_window_focusPtr
      .asFunction<void Function(native_window_t)>();

  void native_window_blur(native_window_t window) {
    return _native_window_blur(window);
  }

  late final _native_window_blurPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(native_window_t)>>(
        'native_window_blur',
      );
  late final _native_window_blur = _native_window_blurPtr
      .asFunction<void Function(native_window_t)>();

  bool native_window_is_focused(native_window_t window) {
    return _native_window_is_focused(window);
  }

  late final _native_window_is_focusedPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(native_window_t)>>(
        'native_window_is_focused',
      );
  late final _native_window_is_focused = _native_window_is_focusedPtr
      .asFunction<bool Function(native_window_t)>();

  void native_window_show(native_window_t window) {
    return _native_window_show(window);
  }

  late final _native_window_showPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(native_window_t)>>(
        'native_window_show',
      );
  late final _native_window_show = _native_window_showPtr
      .asFunction<void Function(native_window_t)>();

  void native_window_show_inactive(native_window_t window) {
    return _native_window_show_inactive(window);
  }

  late final _native_window_show_inactivePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(native_window_t)>>(
        'native_window_show_inactive',
      );
  late final _native_window_show_inactive = _native_window_show_inactivePtr
      .asFunction<void Function(native_window_t)>();

  void native_window_hide(native_window_t window) {
    return _native_window_hide(window);
  }

  late final _native_window_hidePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(native_window_t)>>(
        'native_window_hide',
      );
  late final _native_window_hide = _native_window_hidePtr
      .asFunction<void Function(native_window_t)>();

  bool native_window_is_visible(native_window_t window) {
    return _native_window_is_visible(window);
  }

  late final _native_window_is_visiblePtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(native_window_t)>>(
        'native_window_is_visible',
      );
  late final _native_window_is_visible = _native_window_is_visiblePtr
      .asFunction<bool Function(native_window_t)>();

  /// Window state operations
  void native_window_maximize(native_window_t window) {
    return _native_window_maximize(window);
  }

  late final _native_window_maximizePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(native_window_t)>>(
        'native_window_maximize',
      );
  late final _native_window_maximize = _native_window_maximizePtr
      .asFunction<void Function(native_window_t)>();

  void native_window_unmaximize(native_window_t window) {
    return _native_window_unmaximize(window);
  }

  late final _native_window_unmaximizePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(native_window_t)>>(
        'native_window_unmaximize',
      );
  late final _native_window_unmaximize = _native_window_unmaximizePtr
      .asFunction<void Function(native_window_t)>();

  bool native_window_is_maximized(native_window_t window) {
    return _native_window_is_maximized(window);
  }

  late final _native_window_is_maximizedPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(native_window_t)>>(
        'native_window_is_maximized',
      );
  late final _native_window_is_maximized = _native_window_is_maximizedPtr
      .asFunction<bool Function(native_window_t)>();

  void native_window_minimize(native_window_t window) {
    return _native_window_minimize(window);
  }

  late final _native_window_minimizePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(native_window_t)>>(
        'native_window_minimize',
      );
  late final _native_window_minimize = _native_window_minimizePtr
      .asFunction<void Function(native_window_t)>();

  void native_window_restore(native_window_t window) {
    return _native_window_restore(window);
  }

  late final _native_window_restorePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(native_window_t)>>(
        'native_window_restore',
      );
  late final _native_window_restore = _native_window_restorePtr
      .asFunction<void Function(native_window_t)>();

  bool native_window_is_minimized(native_window_t window) {
    return _native_window_is_minimized(window);
  }

  late final _native_window_is_minimizedPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(native_window_t)>>(
        'native_window_is_minimized',
      );
  late final _native_window_is_minimized = _native_window_is_minimizedPtr
      .asFunction<bool Function(native_window_t)>();

  void native_window_set_fullscreen(
    native_window_t window,
    bool is_fullscreen,
  ) {
    return _native_window_set_fullscreen(window, is_fullscreen);
  }

  late final _native_window_set_fullscreenPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(native_window_t, ffi.Bool)>>(
        'native_window_set_fullscreen',
      );
  late final _native_window_set_fullscreen = _native_window_set_fullscreenPtr
      .asFunction<void Function(native_window_t, bool)>();

  bool native_window_is_fullscreen(native_window_t window) {
    return _native_window_is_fullscreen(window);
  }

  late final _native_window_is_fullscreenPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(native_window_t)>>(
        'native_window_is_fullscreen',
      );
  late final _native_window_is_fullscreen = _native_window_is_fullscreenPtr
      .asFunction<bool Function(native_window_t)>();

  /// Window geometry operations
  void native_window_set_bounds(
    native_window_t window,
    native_rectangle_t bounds,
  ) {
    return _native_window_set_bounds(window, bounds);
  }

  late final _native_window_set_boundsPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(native_window_t, native_rectangle_t)
        >
      >('native_window_set_bounds');
  late final _native_window_set_bounds = _native_window_set_boundsPtr
      .asFunction<void Function(native_window_t, native_rectangle_t)>();

  native_rectangle_t native_window_get_bounds(native_window_t window) {
    return _native_window_get_bounds(window);
  }

  late final _native_window_get_boundsPtr =
      _lookup<ffi.NativeFunction<native_rectangle_t Function(native_window_t)>>(
        'native_window_get_bounds',
      );
  late final _native_window_get_bounds = _native_window_get_boundsPtr
      .asFunction<native_rectangle_t Function(native_window_t)>();

  void native_window_set_size(
    native_window_t window,
    double width,
    double height,
    bool animate,
  ) {
    return _native_window_set_size(window, width, height, animate);
  }

  late final _native_window_set_sizePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(native_window_t, ffi.Double, ffi.Double, ffi.Bool)
        >
      >('native_window_set_size');
  late final _native_window_set_size = _native_window_set_sizePtr
      .asFunction<void Function(native_window_t, double, double, bool)>();

  native_size_t native_window_get_size(native_window_t window) {
    return _native_window_get_size(window);
  }

  late final _native_window_get_sizePtr =
      _lookup<ffi.NativeFunction<native_size_t Function(native_window_t)>>(
        'native_window_get_size',
      );
  late final _native_window_get_size = _native_window_get_sizePtr
      .asFunction<native_size_t Function(native_window_t)>();

  void native_window_set_content_size(
    native_window_t window,
    double width,
    double height,
  ) {
    return _native_window_set_content_size(window, width, height);
  }

  late final _native_window_set_content_sizePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(native_window_t, ffi.Double, ffi.Double)
        >
      >('native_window_set_content_size');
  late final _native_window_set_content_size =
      _native_window_set_content_sizePtr
          .asFunction<void Function(native_window_t, double, double)>();

  native_size_t native_window_get_content_size(native_window_t window) {
    return _native_window_get_content_size(window);
  }

  late final _native_window_get_content_sizePtr =
      _lookup<ffi.NativeFunction<native_size_t Function(native_window_t)>>(
        'native_window_get_content_size',
      );
  late final _native_window_get_content_size =
      _native_window_get_content_sizePtr
          .asFunction<native_size_t Function(native_window_t)>();

  void native_window_set_content_bounds(
    native_window_t window,
    native_rectangle_t bounds,
  ) {
    return _native_window_set_content_bounds(window, bounds);
  }

  late final _native_window_set_content_boundsPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(native_window_t, native_rectangle_t)
        >
      >('native_window_set_content_bounds');
  late final _native_window_set_content_bounds =
      _native_window_set_content_boundsPtr
          .asFunction<void Function(native_window_t, native_rectangle_t)>();

  native_rectangle_t native_window_get_content_bounds(native_window_t window) {
    return _native_window_get_content_bounds(window);
  }

  late final _native_window_get_content_boundsPtr =
      _lookup<ffi.NativeFunction<native_rectangle_t Function(native_window_t)>>(
        'native_window_get_content_bounds',
      );
  late final _native_window_get_content_bounds =
      _native_window_get_content_boundsPtr
          .asFunction<native_rectangle_t Function(native_window_t)>();

  void native_window_set_minimum_size(
    native_window_t window,
    double width,
    double height,
  ) {
    return _native_window_set_minimum_size(window, width, height);
  }

  late final _native_window_set_minimum_sizePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(native_window_t, ffi.Double, ffi.Double)
        >
      >('native_window_set_minimum_size');
  late final _native_window_set_minimum_size =
      _native_window_set_minimum_sizePtr
          .asFunction<void Function(native_window_t, double, double)>();

  native_size_t native_window_get_minimum_size(native_window_t window) {
    return _native_window_get_minimum_size(window);
  }

  late final _native_window_get_minimum_sizePtr =
      _lookup<ffi.NativeFunction<native_size_t Function(native_window_t)>>(
        'native_window_get_minimum_size',
      );
  late final _native_window_get_minimum_size =
      _native_window_get_minimum_sizePtr
          .asFunction<native_size_t Function(native_window_t)>();

  void native_window_set_maximum_size(
    native_window_t window,
    double width,
    double height,
  ) {
    return _native_window_set_maximum_size(window, width, height);
  }

  late final _native_window_set_maximum_sizePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(native_window_t, ffi.Double, ffi.Double)
        >
      >('native_window_set_maximum_size');
  late final _native_window_set_maximum_size =
      _native_window_set_maximum_sizePtr
          .asFunction<void Function(native_window_t, double, double)>();

  native_size_t native_window_get_maximum_size(native_window_t window) {
    return _native_window_get_maximum_size(window);
  }

  late final _native_window_get_maximum_sizePtr =
      _lookup<ffi.NativeFunction<native_size_t Function(native_window_t)>>(
        'native_window_get_maximum_size',
      );
  late final _native_window_get_maximum_size =
      _native_window_get_maximum_sizePtr
          .asFunction<native_size_t Function(native_window_t)>();

  void native_window_set_position(native_window_t window, double x, double y) {
    return _native_window_set_position(window, x, y);
  }

  late final _native_window_set_positionPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(native_window_t, ffi.Double, ffi.Double)
        >
      >('native_window_set_position');
  late final _native_window_set_position = _native_window_set_positionPtr
      .asFunction<void Function(native_window_t, double, double)>();

  native_point_t native_window_get_position(native_window_t window) {
    return _native_window_get_position(window);
  }

  late final _native_window_get_positionPtr =
      _lookup<ffi.NativeFunction<native_point_t Function(native_window_t)>>(
        'native_window_get_position',
      );
  late final _native_window_get_position = _native_window_get_positionPtr
      .asFunction<native_point_t Function(native_window_t)>();

  /// Window properties
  void native_window_set_resizable(native_window_t window, bool resizable) {
    return _native_window_set_resizable(window, resizable);
  }

  late final _native_window_set_resizablePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(native_window_t, ffi.Bool)>>(
        'native_window_set_resizable',
      );
  late final _native_window_set_resizable = _native_window_set_resizablePtr
      .asFunction<void Function(native_window_t, bool)>();

  bool native_window_is_resizable(native_window_t window) {
    return _native_window_is_resizable(window);
  }

  late final _native_window_is_resizablePtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(native_window_t)>>(
        'native_window_is_resizable',
      );
  late final _native_window_is_resizable = _native_window_is_resizablePtr
      .asFunction<bool Function(native_window_t)>();

  void native_window_set_movable(native_window_t window, bool movable) {
    return _native_window_set_movable(window, movable);
  }

  late final _native_window_set_movablePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(native_window_t, ffi.Bool)>>(
        'native_window_set_movable',
      );
  late final _native_window_set_movable = _native_window_set_movablePtr
      .asFunction<void Function(native_window_t, bool)>();

  bool native_window_is_movable(native_window_t window) {
    return _native_window_is_movable(window);
  }

  late final _native_window_is_movablePtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(native_window_t)>>(
        'native_window_is_movable',
      );
  late final _native_window_is_movable = _native_window_is_movablePtr
      .asFunction<bool Function(native_window_t)>();

  void native_window_set_minimizable(native_window_t window, bool minimizable) {
    return _native_window_set_minimizable(window, minimizable);
  }

  late final _native_window_set_minimizablePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(native_window_t, ffi.Bool)>>(
        'native_window_set_minimizable',
      );
  late final _native_window_set_minimizable = _native_window_set_minimizablePtr
      .asFunction<void Function(native_window_t, bool)>();

  bool native_window_is_minimizable(native_window_t window) {
    return _native_window_is_minimizable(window);
  }

  late final _native_window_is_minimizablePtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(native_window_t)>>(
        'native_window_is_minimizable',
      );
  late final _native_window_is_minimizable = _native_window_is_minimizablePtr
      .asFunction<bool Function(native_window_t)>();

  void native_window_set_maximizable(native_window_t window, bool maximizable) {
    return _native_window_set_maximizable(window, maximizable);
  }

  late final _native_window_set_maximizablePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(native_window_t, ffi.Bool)>>(
        'native_window_set_maximizable',
      );
  late final _native_window_set_maximizable = _native_window_set_maximizablePtr
      .asFunction<void Function(native_window_t, bool)>();

  bool native_window_is_maximizable(native_window_t window) {
    return _native_window_is_maximizable(window);
  }

  late final _native_window_is_maximizablePtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(native_window_t)>>(
        'native_window_is_maximizable',
      );
  late final _native_window_is_maximizable = _native_window_is_maximizablePtr
      .asFunction<bool Function(native_window_t)>();

  void native_window_set_fullscreenable(
    native_window_t window,
    bool fullscreenable,
  ) {
    return _native_window_set_fullscreenable(window, fullscreenable);
  }

  late final _native_window_set_fullscreenablePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(native_window_t, ffi.Bool)>>(
        'native_window_set_fullscreenable',
      );
  late final _native_window_set_fullscreenable =
      _native_window_set_fullscreenablePtr
          .asFunction<void Function(native_window_t, bool)>();

  bool native_window_is_fullscreenable(native_window_t window) {
    return _native_window_is_fullscreenable(window);
  }

  late final _native_window_is_fullscreenablePtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(native_window_t)>>(
        'native_window_is_fullscreenable',
      );
  late final _native_window_is_fullscreenable =
      _native_window_is_fullscreenablePtr
          .asFunction<bool Function(native_window_t)>();

  void native_window_set_closable(native_window_t window, bool closable) {
    return _native_window_set_closable(window, closable);
  }

  late final _native_window_set_closablePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(native_window_t, ffi.Bool)>>(
        'native_window_set_closable',
      );
  late final _native_window_set_closable = _native_window_set_closablePtr
      .asFunction<void Function(native_window_t, bool)>();

  bool native_window_is_closable(native_window_t window) {
    return _native_window_is_closable(window);
  }

  late final _native_window_is_closablePtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(native_window_t)>>(
        'native_window_is_closable',
      );
  late final _native_window_is_closable = _native_window_is_closablePtr
      .asFunction<bool Function(native_window_t)>();

  void native_window_set_always_on_top(
    native_window_t window,
    bool always_on_top,
  ) {
    return _native_window_set_always_on_top(window, always_on_top);
  }

  late final _native_window_set_always_on_topPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(native_window_t, ffi.Bool)>>(
        'native_window_set_always_on_top',
      );
  late final _native_window_set_always_on_top =
      _native_window_set_always_on_topPtr
          .asFunction<void Function(native_window_t, bool)>();

  bool native_window_is_always_on_top(native_window_t window) {
    return _native_window_is_always_on_top(window);
  }

  late final _native_window_is_always_on_topPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(native_window_t)>>(
        'native_window_is_always_on_top',
      );
  late final _native_window_is_always_on_top =
      _native_window_is_always_on_topPtr
          .asFunction<bool Function(native_window_t)>();

  bool native_window_set_title(
    native_window_t window,
    ffi.Pointer<ffi.Char> title,
  ) {
    return _native_window_set_title(window, title);
  }

  late final _native_window_set_titlePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Bool Function(native_window_t, ffi.Pointer<ffi.Char>)
        >
      >('native_window_set_title');
  late final _native_window_set_title = _native_window_set_titlePtr
      .asFunction<bool Function(native_window_t, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> native_window_get_title(native_window_t window) {
    return _native_window_get_title(window);
  }

  late final _native_window_get_titlePtr =
      _lookup<
        ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(native_window_t)>
      >('native_window_get_title');
  late final _native_window_get_title = _native_window_get_titlePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(native_window_t)>();

  void native_window_set_has_shadow(native_window_t window, bool has_shadow) {
    return _native_window_set_has_shadow(window, has_shadow);
  }

  late final _native_window_set_has_shadowPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(native_window_t, ffi.Bool)>>(
        'native_window_set_has_shadow',
      );
  late final _native_window_set_has_shadow = _native_window_set_has_shadowPtr
      .asFunction<void Function(native_window_t, bool)>();

  bool native_window_has_shadow(native_window_t window) {
    return _native_window_has_shadow(window);
  }

  late final _native_window_has_shadowPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(native_window_t)>>(
        'native_window_has_shadow',
      );
  late final _native_window_has_shadow = _native_window_has_shadowPtr
      .asFunction<bool Function(native_window_t)>();

  void native_window_set_opacity(native_window_t window, double opacity) {
    return _native_window_set_opacity(window, opacity);
  }

  late final _native_window_set_opacityPtr =
      _lookup<
        ffi.NativeFunction<ffi.Void Function(native_window_t, ffi.Float)>
      >('native_window_set_opacity');
  late final _native_window_set_opacity = _native_window_set_opacityPtr
      .asFunction<void Function(native_window_t, double)>();

  double native_window_get_opacity(native_window_t window) {
    return _native_window_get_opacity(window);
  }

  late final _native_window_get_opacityPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(native_window_t)>>(
        'native_window_get_opacity',
      );
  late final _native_window_get_opacity = _native_window_get_opacityPtr
      .asFunction<double Function(native_window_t)>();

  void native_window_set_visible_on_all_workspaces(
    native_window_t window,
    bool visible,
  ) {
    return _native_window_set_visible_on_all_workspaces(window, visible);
  }

  late final _native_window_set_visible_on_all_workspacesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(native_window_t, ffi.Bool)>>(
        'native_window_set_visible_on_all_workspaces',
      );
  late final _native_window_set_visible_on_all_workspaces =
      _native_window_set_visible_on_all_workspacesPtr
          .asFunction<void Function(native_window_t, bool)>();

  bool native_window_is_visible_on_all_workspaces(native_window_t window) {
    return _native_window_is_visible_on_all_workspaces(window);
  }

  late final _native_window_is_visible_on_all_workspacesPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(native_window_t)>>(
        'native_window_is_visible_on_all_workspaces',
      );
  late final _native_window_is_visible_on_all_workspaces =
      _native_window_is_visible_on_all_workspacesPtr
          .asFunction<bool Function(native_window_t)>();

  void native_window_set_ignore_mouse_events(
    native_window_t window,
    bool ignore,
  ) {
    return _native_window_set_ignore_mouse_events(window, ignore);
  }

  late final _native_window_set_ignore_mouse_eventsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(native_window_t, ffi.Bool)>>(
        'native_window_set_ignore_mouse_events',
      );
  late final _native_window_set_ignore_mouse_events =
      _native_window_set_ignore_mouse_eventsPtr
          .asFunction<void Function(native_window_t, bool)>();

  bool native_window_is_ignore_mouse_events(native_window_t window) {
    return _native_window_is_ignore_mouse_events(window);
  }

  late final _native_window_is_ignore_mouse_eventsPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(native_window_t)>>(
        'native_window_is_ignore_mouse_events',
      );
  late final _native_window_is_ignore_mouse_events =
      _native_window_is_ignore_mouse_eventsPtr
          .asFunction<bool Function(native_window_t)>();

  void native_window_set_focusable(native_window_t window, bool focusable) {
    return _native_window_set_focusable(window, focusable);
  }

  late final _native_window_set_focusablePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(native_window_t, ffi.Bool)>>(
        'native_window_set_focusable',
      );
  late final _native_window_set_focusable = _native_window_set_focusablePtr
      .asFunction<void Function(native_window_t, bool)>();

  bool native_window_is_focusable(native_window_t window) {
    return _native_window_is_focusable(window);
  }

  late final _native_window_is_focusablePtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(native_window_t)>>(
        'native_window_is_focusable',
      );
  late final _native_window_is_focusable = _native_window_is_focusablePtr
      .asFunction<bool Function(native_window_t)>();

  /// Window interactions
  void native_window_start_dragging(native_window_t window) {
    return _native_window_start_dragging(window);
  }

  late final _native_window_start_draggingPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(native_window_t)>>(
        'native_window_start_dragging',
      );
  late final _native_window_start_dragging = _native_window_start_draggingPtr
      .asFunction<void Function(native_window_t)>();

  void native_window_start_resizing(native_window_t window) {
    return _native_window_start_resizing(window);
  }

  late final _native_window_start_resizingPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(native_window_t)>>(
        'native_window_start_resizing',
      );
  late final _native_window_start_resizing = _native_window_start_resizingPtr
      .asFunction<void Function(native_window_t)>();

  /// Platform-specific functions
  ffi.Pointer<ffi.Void> native_window_get_native_object(
    native_window_t window,
  ) {
    return _native_window_get_native_object(window);
  }

  late final _native_window_get_native_objectPtr =
      _lookup<
        ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(native_window_t)>
      >('native_window_get_native_object');
  late final _native_window_get_native_object =
      _native_window_get_native_objectPtr
          .asFunction<ffi.Pointer<ffi.Void> Function(native_window_t)>();

  /// Memory management
  void native_window_free_string(ffi.Pointer<ffi.Char> str) {
    return _native_window_free_string(str);
  }

  late final _native_window_free_stringPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
        'native_window_free_string',
      );
  late final _native_window_free_string = _native_window_free_stringPtr
      .asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  void native_window_list_free(ffi.Pointer<native_window_list_t> list) {
    return _native_window_list_free(list);
  }

  late final _native_window_list_freePtr =
      _lookup<
        ffi.NativeFunction<ffi.Void Function(ffi.Pointer<native_window_list_t>)>
      >('native_window_list_free');
  late final _native_window_list_free = _native_window_list_freePtr
      .asFunction<void Function(ffi.Pointer<native_window_list_t>)>();

  /// @brief Get the singleton instance of Application
  ///
  /// @return Handle to the singleton Application instance
  native_application_t native_application_get_instance() {
    return _native_application_get_instance();
  }

  late final _native_application_get_instancePtr =
      _lookup<ffi.NativeFunction<native_application_t Function()>>(
        'native_application_get_instance',
      );
  late final _native_application_get_instance =
      _native_application_get_instancePtr
          .asFunction<native_application_t Function()>();

  /// @brief Run the application main event loop
  ///
  /// @param app Application handle (must not be NULL)
  /// @return Exit code of the application (0 for success)
  int native_application_run(native_application_t app) {
    return _native_application_run(app);
  }

  late final _native_application_runPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(native_application_t)>>(
        'native_application_run',
      );
  late final _native_application_run = _native_application_runPtr
      .asFunction<int Function(native_application_t)>();

  /// @brief Run the application with the specified window
  ///
  /// @param app Application handle (must not be NULL)
  /// @param window Window handle (must not be NULL)
  /// @return Exit code of the application (0 for success)
  int native_application_run_with_window(
    native_application_t app,
    native_window_t window,
  ) {
    return _native_application_run_with_window(app, window);
  }

  late final _native_application_run_with_windowPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(native_application_t, native_window_t)
        >
      >('native_application_run_with_window');
  late final _native_application_run_with_window =
      _native_application_run_with_windowPtr
          .asFunction<int Function(native_application_t, native_window_t)>();

  /// @brief Request the application to quit
  ///
  /// @param app Application handle (must not be NULL)
  /// @param exit_code The exit code to use when quitting (default: 0)
  void native_application_quit(native_application_t app, int exit_code) {
    return _native_application_quit(app, exit_code);
  }

  late final _native_application_quitPtr =
      _lookup<
        ffi.NativeFunction<ffi.Void Function(native_application_t, ffi.Int)>
      >('native_application_quit');
  late final _native_application_quit = _native_application_quitPtr
      .asFunction<void Function(native_application_t, int)>();

  /// @brief Check if the application is currently running
  ///
  /// @param app Application handle (must not be NULL)
  /// @return true if the application is running, false otherwise
  bool native_application_is_running(native_application_t app) {
    return _native_application_is_running(app);
  }

  late final _native_application_is_runningPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(native_application_t)>>(
        'native_application_is_running',
      );
  late final _native_application_is_running = _native_application_is_runningPtr
      .asFunction<bool Function(native_application_t)>();

  /// @brief Check if this is a single instance application
  ///
  /// @param app Application handle (must not be NULL)
  /// @return true if only one instance is allowed, false otherwise
  bool native_application_is_single_instance(native_application_t app) {
    return _native_application_is_single_instance(app);
  }

  late final _native_application_is_single_instancePtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(native_application_t)>>(
        'native_application_is_single_instance',
      );
  late final _native_application_is_single_instance =
      _native_application_is_single_instancePtr
          .asFunction<bool Function(native_application_t)>();

  /// @brief Set the application icon
  ///
  /// @param app Application handle (must not be NULL)
  /// @param icon_path Path to the icon file (must not be NULL)
  /// @return true if the icon was set successfully, false otherwise
  bool native_application_set_icon(
    native_application_t app,
    ffi.Pointer<ffi.Char> icon_path,
  ) {
    return _native_application_set_icon(app, icon_path);
  }

  late final _native_application_set_iconPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Bool Function(native_application_t, ffi.Pointer<ffi.Char>)
        >
      >('native_application_set_icon');
  late final _native_application_set_icon = _native_application_set_iconPtr
      .asFunction<bool Function(native_application_t, ffi.Pointer<ffi.Char>)>();

  /// @brief Show or hide the dock icon (macOS only)
  ///
  /// @param app Application handle (must not be NULL)
  /// @param visible true to show the dock icon, false to hide it
  /// @return true if the operation succeeded, false otherwise
  bool native_application_set_dock_icon_visible(
    native_application_t app,
    bool visible,
  ) {
    return _native_application_set_dock_icon_visible(app, visible);
  }

  late final _native_application_set_dock_icon_visiblePtr =
      _lookup<
        ffi.NativeFunction<ffi.Bool Function(native_application_t, ffi.Bool)>
      >('native_application_set_dock_icon_visible');
  late final _native_application_set_dock_icon_visible =
      _native_application_set_dock_icon_visiblePtr
          .asFunction<bool Function(native_application_t, bool)>();

  /// @brief Add an event listener for application events
  ///
  /// @param app Application handle (must not be NULL)
  /// @param callback Event callback function (must not be NULL)
  /// @return Listener ID that can be used to remove the listener, or 0 on failure
  int native_application_add_event_listener(
    native_application_t app,
    native_application_event_callback_t callback,
  ) {
    return _native_application_add_event_listener(app, callback);
  }

  late final _native_application_add_event_listenerPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Size Function(
            native_application_t,
            native_application_event_callback_t,
          )
        >
      >('native_application_add_event_listener');
  late final _native_application_add_event_listener =
      _native_application_add_event_listenerPtr
          .asFunction<
            int Function(
              native_application_t,
              native_application_event_callback_t,
            )
          >();

  /// @brief Remove an event listener by ID
  ///
  /// @param app Application handle (must not be NULL)
  /// @param listener_id The ID returned by native_application_add_event_listener
  /// @return true if the listener was found and removed, false otherwise
  bool native_application_remove_event_listener(
    native_application_t app,
    int listener_id,
  ) {
    return _native_application_remove_event_listener(app, listener_id);
  }

  late final _native_application_remove_event_listenerPtr =
      _lookup<
        ffi.NativeFunction<ffi.Bool Function(native_application_t, ffi.Size)>
      >('native_application_remove_event_listener');
  late final _native_application_remove_event_listener =
      _native_application_remove_event_listenerPtr
          .asFunction<bool Function(native_application_t, int)>();

  /// @brief Convenience function to run the application with the specified window
  ///
  /// This is equivalent to calling native_application_run_with_window with the singleton instance.
  /// This function provides a simple way to run an application without explicitly
  /// accessing the singleton.
  ///
  /// @param window Window handle (must not be NULL)
  /// @return Exit code of the application (0 for success)
  int native_run_app(native_window_t window) {
    return _native_run_app(window);
  }

  late final _native_run_appPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(native_window_t)>>(
        'native_run_app',
      );
  late final _native_run_app = _native_run_appPtr
      .asFunction<int Function(native_window_t)>();

  /// Basic identification getters
  ffi.Pointer<ffi.Char> native_display_get_id(native_display_t display) {
    return _native_display_get_id(display);
  }

  late final _native_display_get_idPtr =
      _lookup<
        ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(native_display_t)>
      >('native_display_get_id');
  late final _native_display_get_id = _native_display_get_idPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(native_display_t)>();

  ffi.Pointer<ffi.Char> native_display_get_name(native_display_t display) {
    return _native_display_get_name(display);
  }

  late final _native_display_get_namePtr =
      _lookup<
        ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(native_display_t)>
      >('native_display_get_name');
  late final _native_display_get_name = _native_display_get_namePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(native_display_t)>();

  /// Physical properties getters
  native_point_t native_display_get_position(native_display_t display) {
    return _native_display_get_position(display);
  }

  late final _native_display_get_positionPtr =
      _lookup<ffi.NativeFunction<native_point_t Function(native_display_t)>>(
        'native_display_get_position',
      );
  late final _native_display_get_position = _native_display_get_positionPtr
      .asFunction<native_point_t Function(native_display_t)>();

  native_size_t native_display_get_size(native_display_t display) {
    return _native_display_get_size(display);
  }

  late final _native_display_get_sizePtr =
      _lookup<ffi.NativeFunction<native_size_t Function(native_display_t)>>(
        'native_display_get_size',
      );
  late final _native_display_get_size = _native_display_get_sizePtr
      .asFunction<native_size_t Function(native_display_t)>();

  native_rectangle_t native_display_get_work_area(native_display_t display) {
    return _native_display_get_work_area(display);
  }

  late final _native_display_get_work_areaPtr =
      _lookup<
        ffi.NativeFunction<native_rectangle_t Function(native_display_t)>
      >('native_display_get_work_area');
  late final _native_display_get_work_area = _native_display_get_work_areaPtr
      .asFunction<native_rectangle_t Function(native_display_t)>();

  double native_display_get_scale_factor(native_display_t display) {
    return _native_display_get_scale_factor(display);
  }

  late final _native_display_get_scale_factorPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(native_display_t)>>(
        'native_display_get_scale_factor',
      );
  late final _native_display_get_scale_factor =
      _native_display_get_scale_factorPtr
          .asFunction<double Function(native_display_t)>();

  /// Additional properties getters
  bool native_display_is_primary(native_display_t display) {
    return _native_display_is_primary(display);
  }

  late final _native_display_is_primaryPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(native_display_t)>>(
        'native_display_is_primary',
      );
  late final _native_display_is_primary = _native_display_is_primaryPtr
      .asFunction<bool Function(native_display_t)>();

  native_display_orientation_t native_display_get_orientation(
    native_display_t display,
  ) {
    return native_display_orientation_t.fromValue(
      _native_display_get_orientation(display),
    );
  }

  late final _native_display_get_orientationPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(native_display_t)>>(
        'native_display_get_orientation',
      );
  late final _native_display_get_orientation =
      _native_display_get_orientationPtr
          .asFunction<int Function(native_display_t)>();

  int native_display_get_refresh_rate(native_display_t display) {
    return _native_display_get_refresh_rate(display);
  }

  late final _native_display_get_refresh_ratePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(native_display_t)>>(
        'native_display_get_refresh_rate',
      );
  late final _native_display_get_refresh_rate =
      _native_display_get_refresh_ratePtr
          .asFunction<int Function(native_display_t)>();

  int native_display_get_bit_depth(native_display_t display) {
    return _native_display_get_bit_depth(display);
  }

  late final _native_display_get_bit_depthPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(native_display_t)>>(
        'native_display_get_bit_depth',
      );
  late final _native_display_get_bit_depth = _native_display_get_bit_depthPtr
      .asFunction<int Function(native_display_t)>();

  /// Platform-specific functions
  ffi.Pointer<ffi.Void> native_display_get_native_object(
    native_display_t display,
  ) {
    return _native_display_get_native_object(display);
  }

  late final _native_display_get_native_objectPtr =
      _lookup<
        ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(native_display_t)>
      >('native_display_get_native_object');
  late final _native_display_get_native_object =
      _native_display_get_native_objectPtr
          .asFunction<ffi.Pointer<ffi.Void> Function(native_display_t)>();

  /// Memory management
  void native_display_free(native_display_t display) {
    return _native_display_free(display);
  }

  late final _native_display_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(native_display_t)>>(
        'native_display_free',
      );
  late final _native_display_free = _native_display_freePtr
      .asFunction<void Function(native_display_t)>();

  void native_display_list_free(ffi.Pointer<native_display_list_t> list) {
    return _native_display_list_free(list);
  }

  late final _native_display_list_freePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<native_display_list_t>)
        >
      >('native_display_list_free');
  late final _native_display_list_free = _native_display_list_freePtr
      .asFunction<void Function(ffi.Pointer<native_display_list_t>)>();

  native_display_list_t native_display_manager_get_all() {
    return _native_display_manager_get_all();
  }

  late final _native_display_manager_get_allPtr =
      _lookup<ffi.NativeFunction<native_display_list_t Function()>>(
        'native_display_manager_get_all',
      );
  late final _native_display_manager_get_all =
      _native_display_manager_get_allPtr
          .asFunction<native_display_list_t Function()>();

  native_display_t native_display_manager_get_primary() {
    return _native_display_manager_get_primary();
  }

  late final _native_display_manager_get_primaryPtr =
      _lookup<ffi.NativeFunction<native_display_t Function()>>(
        'native_display_manager_get_primary',
      );
  late final _native_display_manager_get_primary =
      _native_display_manager_get_primaryPtr
          .asFunction<native_display_t Function()>();

  native_point_t native_display_manager_get_cursor_position() {
    return _native_display_manager_get_cursor_position();
  }

  late final _native_display_manager_get_cursor_positionPtr =
      _lookup<ffi.NativeFunction<native_point_t Function()>>(
        'native_display_manager_get_cursor_position',
      );
  late final _native_display_manager_get_cursor_position =
      _native_display_manager_get_cursor_positionPtr
          .asFunction<native_point_t Function()>();

  /// Create an image from a file path
  /// @param file_path Path to the image file
  /// @return Image handle, or NULL if loading failed
  native_image_t native_image_from_file(ffi.Pointer<ffi.Char> file_path) {
    return _native_image_from_file(file_path);
  }

  late final _native_image_from_filePtr =
      _lookup<
        ffi.NativeFunction<native_image_t Function(ffi.Pointer<ffi.Char>)>
      >('native_image_from_file');
  late final _native_image_from_file = _native_image_from_filePtr
      .asFunction<native_image_t Function(ffi.Pointer<ffi.Char>)>();

  /// Create an image from base64-encoded data
  /// @param base64_data Base64-encoded image data, with or without data URI prefix
  /// @return Image handle, or NULL if decoding failed
  native_image_t native_image_from_base64(ffi.Pointer<ffi.Char> base64_data) {
    return _native_image_from_base64(base64_data);
  }

  late final _native_image_from_base64Ptr =
      _lookup<
        ffi.NativeFunction<native_image_t Function(ffi.Pointer<ffi.Char>)>
      >('native_image_from_base64');
  late final _native_image_from_base64 = _native_image_from_base64Ptr
      .asFunction<native_image_t Function(ffi.Pointer<ffi.Char>)>();

  /// Destroy an image and release its resources
  /// @param image The image to destroy
  void native_image_destroy(native_image_t image) {
    return _native_image_destroy(image);
  }

  late final _native_image_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(native_image_t)>>(
        'native_image_destroy',
      );
  late final _native_image_destroy = _native_image_destroyPtr
      .asFunction<void Function(native_image_t)>();

  /// Get the size of an image in pixels
  /// @param image The image
  /// @return Size of the image (width and height will be 0 if invalid)
  native_size_t native_image_get_size(native_image_t image) {
    return _native_image_get_size(image);
  }

  late final _native_image_get_sizePtr =
      _lookup<ffi.NativeFunction<native_size_t Function(native_image_t)>>(
        'native_image_get_size',
      );
  late final _native_image_get_size = _native_image_get_sizePtr
      .asFunction<native_size_t Function(native_image_t)>();

  /// Get the image format string for debugging purposes
  /// @param image The image
  /// @return The image format (e.g., "PNG", "JPEG", "GIF"), or NULL if unknown
  /// (caller must free)
  ffi.Pointer<ffi.Char> native_image_get_format(native_image_t image) {
    return _native_image_get_format(image);
  }

  late final _native_image_get_formatPtr =
      _lookup<
        ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(native_image_t)>
      >('native_image_get_format');
  late final _native_image_get_format = _native_image_get_formatPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(native_image_t)>();

  /// Convert an image to base64-encoded PNG data
  /// @param image The image
  /// @return Base64-encoded PNG data with data URI prefix (caller must free), or
  /// NULL on error
  ffi.Pointer<ffi.Char> native_image_to_base64(native_image_t image) {
    return _native_image_to_base64(image);
  }

  late final _native_image_to_base64Ptr =
      _lookup<
        ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(native_image_t)>
      >('native_image_to_base64');
  late final _native_image_to_base64 = _native_image_to_base64Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(native_image_t)>();

  /// Save an image to a file
  /// @param image The image
  /// @param file_path Path where the image should be saved
  /// @return true if saved successfully, false otherwise
  bool native_image_save_to_file(
    native_image_t image,
    ffi.Pointer<ffi.Char> file_path,
  ) {
    return _native_image_save_to_file(image, file_path);
  }

  late final _native_image_save_to_filePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Bool Function(native_image_t, ffi.Pointer<ffi.Char>)
        >
      >('native_image_save_to_file');
  late final _native_image_save_to_file = _native_image_save_to_filePtr
      .asFunction<bool Function(native_image_t, ffi.Pointer<ffi.Char>)>();

  /// Create a positioning strategy for absolute positioning at fixed coordinates
  /// @param point Point in screen coordinates
  /// @return Positioning strategy handle
  native_positioning_strategy_t native_positioning_strategy_absolute(
    ffi.Pointer<native_point_t> point,
  ) {
    return _native_positioning_strategy_absolute(point);
  }

  late final _native_positioning_strategy_absolutePtr =
      _lookup<
        ffi.NativeFunction<
          native_positioning_strategy_t Function(ffi.Pointer<native_point_t>)
        >
      >('native_positioning_strategy_absolute');
  late final _native_positioning_strategy_absolute =
      _native_positioning_strategy_absolutePtr
          .asFunction<
            native_positioning_strategy_t Function(ffi.Pointer<native_point_t>)
          >();

  /// Create a positioning strategy for positioning at current mouse location
  /// @return Positioning strategy handle
  native_positioning_strategy_t native_positioning_strategy_cursor_position() {
    return _native_positioning_strategy_cursor_position();
  }

  late final _native_positioning_strategy_cursor_positionPtr =
      _lookup<ffi.NativeFunction<native_positioning_strategy_t Function()>>(
        'native_positioning_strategy_cursor_position',
      );
  late final _native_positioning_strategy_cursor_position =
      _native_positioning_strategy_cursor_positionPtr
          .asFunction<native_positioning_strategy_t Function()>();

  /// Create a positioning strategy for positioning relative to a rectangle
  /// @param rect Rectangle in screen coordinates to position relative to
  /// @param offset Offset point to apply to the position, or NULL for no offset
  /// @return Positioning strategy handle
  ///
  /// @example
  /// ```c
  /// native_rectangle_t buttonRect = {100, 100, 50, 30};
  /// native_point_t offset = {0, 10};
  /// native_positioning_strategy_t strategy = native_positioning_strategy_relative(&buttonRect,
  /// &offset); native_menu_open(menu, strategy); native_positioning_strategy_free(strategy);
  /// ```
  native_positioning_strategy_t native_positioning_strategy_relative(
    ffi.Pointer<native_rectangle_t> rect,
    ffi.Pointer<native_point_t> offset,
  ) {
    return _native_positioning_strategy_relative(rect, offset);
  }

  late final _native_positioning_strategy_relativePtr =
      _lookup<
        ffi.NativeFunction<
          native_positioning_strategy_t Function(
            ffi.Pointer<native_rectangle_t>,
            ffi.Pointer<native_point_t>,
          )
        >
      >('native_positioning_strategy_relative');
  late final _native_positioning_strategy_relative =
      _native_positioning_strategy_relativePtr
          .asFunction<
            native_positioning_strategy_t Function(
              ffi.Pointer<native_rectangle_t>,
              ffi.Pointer<native_point_t>,
            )
          >();

  /// Create a positioning strategy for positioning relative to a window
  /// @param window Window to position relative to
  /// @param offset Offset point to apply to the position, or NULL for no offset
  /// @return Positioning strategy handle, or NULL if window is invalid
  ///
  /// This function obtains the window's bounds using native_window_get_bounds()
  /// and creates a Relative positioning strategy based on those bounds.
  ///
  /// @example
  /// ```c
  /// native_window_t window = native_window_manager_create(&options);
  /// native_point_t offset = {0, 10};
  /// native_positioning_strategy_t strategy = native_positioning_strategy_relative_to_window(window,
  /// &offset); native_menu_open(menu, strategy); native_positioning_strategy_free(strategy);
  /// ```
  native_positioning_strategy_t native_positioning_strategy_relative_to_window(
    native_window_t window,
    ffi.Pointer<native_point_t> offset,
  ) {
    return _native_positioning_strategy_relative_to_window(window, offset);
  }

  late final _native_positioning_strategy_relative_to_windowPtr =
      _lookup<
        ffi.NativeFunction<
          native_positioning_strategy_t Function(
            native_window_t,
            ffi.Pointer<native_point_t>,
          )
        >
      >('native_positioning_strategy_relative_to_window');
  late final _native_positioning_strategy_relative_to_window =
      _native_positioning_strategy_relative_to_windowPtr
          .asFunction<
            native_positioning_strategy_t Function(
              native_window_t,
              ffi.Pointer<native_point_t>,
            )
          >();

  /// Free a positioning strategy handle
  /// @param strategy The positioning strategy to free
  void native_positioning_strategy_free(
    native_positioning_strategy_t strategy,
  ) {
    return _native_positioning_strategy_free(strategy);
  }

  late final _native_positioning_strategy_freePtr =
      _lookup<
        ffi.NativeFunction<ffi.Void Function(native_positioning_strategy_t)>
      >('native_positioning_strategy_free');
  late final _native_positioning_strategy_free =
      _native_positioning_strategy_freePtr
          .asFunction<void Function(native_positioning_strategy_t)>();

  /// Create a new menu item
  /// @param label The display label for the menu item
  /// @param type The type of menu item to create
  /// @return Menu item handle, or NULL if creation failed
  native_menu_item_t native_menu_item_create(
    ffi.Pointer<ffi.Char> label,
    native_menu_item_type_t type,
  ) {
    return _native_menu_item_create(label, type.value);
  }

  late final _native_menu_item_createPtr =
      _lookup<
        ffi.NativeFunction<
          native_menu_item_t Function(ffi.Pointer<ffi.Char>, ffi.UnsignedInt)
        >
      >('native_menu_item_create');
  late final _native_menu_item_create = _native_menu_item_createPtr
      .asFunction<native_menu_item_t Function(ffi.Pointer<ffi.Char>, int)>();

  /// Create a separator menu item
  /// @return Menu item handle, or NULL if creation failed
  native_menu_item_t native_menu_item_create_separator() {
    return _native_menu_item_create_separator();
  }

  late final _native_menu_item_create_separatorPtr =
      _lookup<ffi.NativeFunction<native_menu_item_t Function()>>(
        'native_menu_item_create_separator',
      );
  late final _native_menu_item_create_separator =
      _native_menu_item_create_separatorPtr
          .asFunction<native_menu_item_t Function()>();

  /// Destroy a menu item and release its resources
  /// @param item The menu item to destroy
  void native_menu_item_destroy(native_menu_item_t item) {
    return _native_menu_item_destroy(item);
  }

  late final _native_menu_item_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(native_menu_item_t)>>(
        'native_menu_item_destroy',
      );
  late final _native_menu_item_destroy = _native_menu_item_destroyPtr
      .asFunction<void Function(native_menu_item_t)>();

  /// Get the ID of a menu item
  /// @param item The menu item
  /// @return The menu item ID
  int native_menu_item_get_id(native_menu_item_t item) {
    return _native_menu_item_get_id(item);
  }

  late final _native_menu_item_get_idPtr =
      _lookup<
        ffi.NativeFunction<native_menu_item_id_t Function(native_menu_item_t)>
      >('native_menu_item_get_id');
  late final _native_menu_item_get_id = _native_menu_item_get_idPtr
      .asFunction<int Function(native_menu_item_t)>();

  /// Get the type of a menu item
  /// @param item The menu item
  /// @return The menu item type
  native_menu_item_type_t native_menu_item_get_type(native_menu_item_t item) {
    return native_menu_item_type_t.fromValue(_native_menu_item_get_type(item));
  }

  late final _native_menu_item_get_typePtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(native_menu_item_t)>>(
        'native_menu_item_get_type',
      );
  late final _native_menu_item_get_type = _native_menu_item_get_typePtr
      .asFunction<int Function(native_menu_item_t)>();

  /// Set the label of a menu item
  /// @param item The menu item
  /// @param label The label to set
  void native_menu_item_set_label(
    native_menu_item_t item,
    ffi.Pointer<ffi.Char> label,
  ) {
    return _native_menu_item_set_label(item, label);
  }

  late final _native_menu_item_set_labelPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(native_menu_item_t, ffi.Pointer<ffi.Char>)
        >
      >('native_menu_item_set_label');
  late final _native_menu_item_set_label = _native_menu_item_set_labelPtr
      .asFunction<void Function(native_menu_item_t, ffi.Pointer<ffi.Char>)>();

  /// Get the label of a menu item
  /// @param item The menu item
  /// @return The label string (caller must free), or NULL if item is invalid
  ffi.Pointer<ffi.Char> native_menu_item_get_label(native_menu_item_t item) {
    return _native_menu_item_get_label(item);
  }

  late final _native_menu_item_get_labelPtr =
      _lookup<
        ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(native_menu_item_t)>
      >('native_menu_item_get_label');
  late final _native_menu_item_get_label = _native_menu_item_get_labelPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(native_menu_item_t)>();

  /// Set the icon of a menu item using an Image object
  /// @param item The menu item
  /// @param image The Image object to set as the icon, or NULL to clear the icon
  void native_menu_item_set_icon(
    native_menu_item_t item,
    native_image_t image,
  ) {
    return _native_menu_item_set_icon(item, image);
  }

  late final _native_menu_item_set_iconPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(native_menu_item_t, native_image_t)
        >
      >('native_menu_item_set_icon');
  late final _native_menu_item_set_icon = _native_menu_item_set_iconPtr
      .asFunction<void Function(native_menu_item_t, native_image_t)>();

  /// Get the current icon image of the menu item
  /// @param item The menu item
  /// @return The Image object, or NULL if no icon is set. Caller must call
  /// native_image_destroy() when done.
  native_image_t native_menu_item_get_icon(native_menu_item_t item) {
    return _native_menu_item_get_icon(item);
  }

  late final _native_menu_item_get_iconPtr =
      _lookup<ffi.NativeFunction<native_image_t Function(native_menu_item_t)>>(
        'native_menu_item_get_icon',
      );
  late final _native_menu_item_get_icon = _native_menu_item_get_iconPtr
      .asFunction<native_image_t Function(native_menu_item_t)>();

  /// Set the tooltip of a menu item
  /// @param item The menu item
  /// @param tooltip The tooltip text to set
  void native_menu_item_set_tooltip(
    native_menu_item_t item,
    ffi.Pointer<ffi.Char> tooltip,
  ) {
    return _native_menu_item_set_tooltip(item, tooltip);
  }

  late final _native_menu_item_set_tooltipPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(native_menu_item_t, ffi.Pointer<ffi.Char>)
        >
      >('native_menu_item_set_tooltip');
  late final _native_menu_item_set_tooltip = _native_menu_item_set_tooltipPtr
      .asFunction<void Function(native_menu_item_t, ffi.Pointer<ffi.Char>)>();

  /// Get the tooltip of a menu item
  /// @param item The menu item
  /// @return The tooltip string (caller must free), or NULL if item is invalid or no tooltip set
  ffi.Pointer<ffi.Char> native_menu_item_get_tooltip(native_menu_item_t item) {
    return _native_menu_item_get_tooltip(item);
  }

  late final _native_menu_item_get_tooltipPtr =
      _lookup<
        ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(native_menu_item_t)>
      >('native_menu_item_get_tooltip');
  late final _native_menu_item_get_tooltip = _native_menu_item_get_tooltipPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(native_menu_item_t)>();

  /// Set the keyboard accelerator for a menu item
  /// @param item The menu item
  /// @param accelerator The keyboard accelerator to set, or NULL to remove the accelerator
  void native_menu_item_set_accelerator(
    native_menu_item_t item,
    ffi.Pointer<native_keyboard_accelerator_t> accelerator,
  ) {
    return _native_menu_item_set_accelerator(item, accelerator);
  }

  late final _native_menu_item_set_acceleratorPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(
            native_menu_item_t,
            ffi.Pointer<native_keyboard_accelerator_t>,
          )
        >
      >('native_menu_item_set_accelerator');
  late final _native_menu_item_set_accelerator =
      _native_menu_item_set_acceleratorPtr
          .asFunction<
            void Function(
              native_menu_item_t,
              ffi.Pointer<native_keyboard_accelerator_t>,
            )
          >();

  /// Get the keyboard accelerator of a menu item
  /// @param item The menu item
  /// @param accelerator Pointer to store the accelerator (caller allocated)
  /// @return true if accelerator exists, false otherwise
  bool native_menu_item_get_accelerator(
    native_menu_item_t item,
    ffi.Pointer<native_keyboard_accelerator_t> accelerator,
  ) {
    return _native_menu_item_get_accelerator(item, accelerator);
  }

  late final _native_menu_item_get_acceleratorPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Bool Function(
            native_menu_item_t,
            ffi.Pointer<native_keyboard_accelerator_t>,
          )
        >
      >('native_menu_item_get_accelerator');
  late final _native_menu_item_get_accelerator =
      _native_menu_item_get_acceleratorPtr
          .asFunction<
            bool Function(
              native_menu_item_t,
              ffi.Pointer<native_keyboard_accelerator_t>,
            )
          >();

  /// Set the enabled state of a menu item
  /// @param item The menu item
  /// @param enabled true to enable, false to disable
  void native_menu_item_set_enabled(native_menu_item_t item, bool enabled) {
    return _native_menu_item_set_enabled(item, enabled);
  }

  late final _native_menu_item_set_enabledPtr =
      _lookup<
        ffi.NativeFunction<ffi.Void Function(native_menu_item_t, ffi.Bool)>
      >('native_menu_item_set_enabled');
  late final _native_menu_item_set_enabled = _native_menu_item_set_enabledPtr
      .asFunction<void Function(native_menu_item_t, bool)>();

  /// Check if a menu item is enabled
  /// @param item The menu item
  /// @return true if enabled, false otherwise
  bool native_menu_item_is_enabled(native_menu_item_t item) {
    return _native_menu_item_is_enabled(item);
  }

  late final _native_menu_item_is_enabledPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(native_menu_item_t)>>(
        'native_menu_item_is_enabled',
      );
  late final _native_menu_item_is_enabled = _native_menu_item_is_enabledPtr
      .asFunction<bool Function(native_menu_item_t)>();

  /// Set the state of a checkbox/radio menu item
  /// @param item The menu item
  /// @param state The state to set (unchecked, checked, or mixed)
  void native_menu_item_set_state(
    native_menu_item_t item,
    native_menu_item_state_t state,
  ) {
    return _native_menu_item_set_state(item, state.value);
  }

  late final _native_menu_item_set_statePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(native_menu_item_t, ffi.UnsignedInt)
        >
      >('native_menu_item_set_state');
  late final _native_menu_item_set_state = _native_menu_item_set_statePtr
      .asFunction<void Function(native_menu_item_t, int)>();

  /// Get the state of a menu item
  /// @param item The menu item
  /// @return The current state of the menu item
  native_menu_item_state_t native_menu_item_get_state(native_menu_item_t item) {
    return native_menu_item_state_t.fromValue(
      _native_menu_item_get_state(item),
    );
  }

  late final _native_menu_item_get_statePtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(native_menu_item_t)>>(
        'native_menu_item_get_state',
      );
  late final _native_menu_item_get_state = _native_menu_item_get_statePtr
      .asFunction<int Function(native_menu_item_t)>();

  /// Set the radio group ID for a radio menu item
  /// @param item The menu item
  /// @param group_id The radio group identifier
  void native_menu_item_set_radio_group(native_menu_item_t item, int group_id) {
    return _native_menu_item_set_radio_group(item, group_id);
  }

  late final _native_menu_item_set_radio_groupPtr =
      _lookup<
        ffi.NativeFunction<ffi.Void Function(native_menu_item_t, ffi.Int)>
      >('native_menu_item_set_radio_group');
  late final _native_menu_item_set_radio_group =
      _native_menu_item_set_radio_groupPtr
          .asFunction<void Function(native_menu_item_t, int)>();

  /// Get the radio group ID of a menu item
  /// @param item The menu item
  /// @return The radio group ID, or -1 if not set
  int native_menu_item_get_radio_group(native_menu_item_t item) {
    return _native_menu_item_get_radio_group(item);
  }

  late final _native_menu_item_get_radio_groupPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(native_menu_item_t)>>(
        'native_menu_item_get_radio_group',
      );
  late final _native_menu_item_get_radio_group =
      _native_menu_item_get_radio_groupPtr
          .asFunction<int Function(native_menu_item_t)>();

  /// Set the submenu for a menu item
  /// @param item The menu item
  /// @param submenu The submenu to attach, or NULL to remove the submenu
  void native_menu_item_set_submenu(
    native_menu_item_t item,
    native_menu_t submenu,
  ) {
    return _native_menu_item_set_submenu(item, submenu);
  }

  late final _native_menu_item_set_submenuPtr =
      _lookup<
        ffi.NativeFunction<ffi.Void Function(native_menu_item_t, native_menu_t)>
      >('native_menu_item_set_submenu');
  late final _native_menu_item_set_submenu = _native_menu_item_set_submenuPtr
      .asFunction<void Function(native_menu_item_t, native_menu_t)>();

  /// Get the submenu of a menu item
  /// @param item The menu item
  /// @return The submenu handle, or NULL if no submenu
  native_menu_t native_menu_item_get_submenu(native_menu_item_t item) {
    return _native_menu_item_get_submenu(item);
  }

  late final _native_menu_item_get_submenuPtr =
      _lookup<ffi.NativeFunction<native_menu_t Function(native_menu_item_t)>>(
        'native_menu_item_get_submenu',
      );
  late final _native_menu_item_get_submenu = _native_menu_item_get_submenuPtr
      .asFunction<native_menu_t Function(native_menu_item_t)>();

  /// Add event listener for a menu item
  /// @param item The menu item
  /// @param event_type The type of event to listen for
  /// @param callback The callback function
  /// @param user_data User data passed to callback
  /// @return A listener ID that can be used to remove the listener, or -1 on error
  int native_menu_item_add_listener(
    native_menu_item_t item,
    native_menu_item_event_type_t event_type,
    native_menu_item_event_callback_t callback,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _native_menu_item_add_listener(
      item,
      event_type.value,
      callback,
      user_data,
    );
  }

  late final _native_menu_item_add_listenerPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            native_menu_item_t,
            ffi.UnsignedInt,
            native_menu_item_event_callback_t,
            ffi.Pointer<ffi.Void>,
          )
        >
      >('native_menu_item_add_listener');
  late final _native_menu_item_add_listener = _native_menu_item_add_listenerPtr
      .asFunction<
        int Function(
          native_menu_item_t,
          int,
          native_menu_item_event_callback_t,
          ffi.Pointer<ffi.Void>,
        )
      >();

  /// Remove event listener from a menu item
  /// @param item The menu item
  /// @param listener_id The listener ID returned by native_menu_item_add_listener
  /// @return true if removed successfully, false otherwise
  bool native_menu_item_remove_listener(
    native_menu_item_t item,
    int listener_id,
  ) {
    return _native_menu_item_remove_listener(item, listener_id);
  }

  late final _native_menu_item_remove_listenerPtr =
      _lookup<
        ffi.NativeFunction<ffi.Bool Function(native_menu_item_t, ffi.Int)>
      >('native_menu_item_remove_listener');
  late final _native_menu_item_remove_listener =
      _native_menu_item_remove_listenerPtr
          .asFunction<bool Function(native_menu_item_t, int)>();

  /// Create a new menu
  /// @return Menu handle, or NULL if creation failed
  native_menu_t native_menu_create() {
    return _native_menu_create();
  }

  late final _native_menu_createPtr =
      _lookup<ffi.NativeFunction<native_menu_t Function()>>(
        'native_menu_create',
      );
  late final _native_menu_create = _native_menu_createPtr
      .asFunction<native_menu_t Function()>();

  /// Destroy a menu and release its resources
  /// @param menu The menu to destroy
  void native_menu_destroy(native_menu_t menu) {
    return _native_menu_destroy(menu);
  }

  late final _native_menu_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(native_menu_t)>>(
        'native_menu_destroy',
      );
  late final _native_menu_destroy = _native_menu_destroyPtr
      .asFunction<void Function(native_menu_t)>();

  /// Get the ID of a menu
  /// @param menu The menu
  /// @return The menu ID
  int native_menu_get_id(native_menu_t menu) {
    return _native_menu_get_id(menu);
  }

  late final _native_menu_get_idPtr =
      _lookup<ffi.NativeFunction<native_menu_id_t Function(native_menu_t)>>(
        'native_menu_get_id',
      );
  late final _native_menu_get_id = _native_menu_get_idPtr
      .asFunction<int Function(native_menu_t)>();

  /// Add a menu item to the end of the menu
  /// @param menu The menu
  /// @param item The menu item to add
  void native_menu_add_item(native_menu_t menu, native_menu_item_t item) {
    return _native_menu_add_item(menu, item);
  }

  late final _native_menu_add_itemPtr =
      _lookup<
        ffi.NativeFunction<ffi.Void Function(native_menu_t, native_menu_item_t)>
      >('native_menu_add_item');
  late final _native_menu_add_item = _native_menu_add_itemPtr
      .asFunction<void Function(native_menu_t, native_menu_item_t)>();

  /// Insert a menu item at a specific position
  /// @param menu The menu
  /// @param item The menu item to insert
  /// @param index The position to insert at (0-based)
  void native_menu_insert_item(
    native_menu_t menu,
    native_menu_item_t item,
    int index,
  ) {
    return _native_menu_insert_item(menu, item, index);
  }

  late final _native_menu_insert_itemPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(native_menu_t, native_menu_item_t, ffi.Size)
        >
      >('native_menu_insert_item');
  late final _native_menu_insert_item = _native_menu_insert_itemPtr
      .asFunction<void Function(native_menu_t, native_menu_item_t, int)>();

  /// Remove a menu item from the menu
  /// @param menu The menu
  /// @param item The menu item to remove
  /// @return true if item was found and removed, false otherwise
  bool native_menu_remove_item(native_menu_t menu, native_menu_item_t item) {
    return _native_menu_remove_item(menu, item);
  }

  late final _native_menu_remove_itemPtr =
      _lookup<
        ffi.NativeFunction<ffi.Bool Function(native_menu_t, native_menu_item_t)>
      >('native_menu_remove_item');
  late final _native_menu_remove_item = _native_menu_remove_itemPtr
      .asFunction<bool Function(native_menu_t, native_menu_item_t)>();

  /// Remove a menu item by its ID
  /// @param menu The menu
  /// @param item_id The ID of the item to remove
  /// @return true if item was found and removed, false otherwise
  bool native_menu_remove_item_by_id(native_menu_t menu, int item_id) {
    return _native_menu_remove_item_by_id(menu, item_id);
  }

  late final _native_menu_remove_item_by_idPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Bool Function(native_menu_t, native_menu_item_id_t)
        >
      >('native_menu_remove_item_by_id');
  late final _native_menu_remove_item_by_id = _native_menu_remove_item_by_idPtr
      .asFunction<bool Function(native_menu_t, int)>();

  /// Remove a menu item at a specific position
  /// @param menu The menu
  /// @param index The position of the item to remove (0-based)
  /// @return true if item was removed, false if index out of bounds
  bool native_menu_remove_item_at(native_menu_t menu, int index) {
    return _native_menu_remove_item_at(menu, index);
  }

  late final _native_menu_remove_item_atPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(native_menu_t, ffi.Size)>>(
        'native_menu_remove_item_at',
      );
  late final _native_menu_remove_item_at = _native_menu_remove_item_atPtr
      .asFunction<bool Function(native_menu_t, int)>();

  /// Remove all items from the menu
  /// @param menu The menu
  void native_menu_clear(native_menu_t menu) {
    return _native_menu_clear(menu);
  }

  late final _native_menu_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(native_menu_t)>>(
        'native_menu_clear',
      );
  late final _native_menu_clear = _native_menu_clearPtr
      .asFunction<void Function(native_menu_t)>();

  /// Add a separator to the end of the menu
  /// @param menu The menu
  void native_menu_add_separator(native_menu_t menu) {
    return _native_menu_add_separator(menu);
  }

  late final _native_menu_add_separatorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(native_menu_t)>>(
        'native_menu_add_separator',
      );
  late final _native_menu_add_separator = _native_menu_add_separatorPtr
      .asFunction<void Function(native_menu_t)>();

  /// Insert a separator at a specific position
  /// @param menu The menu
  /// @param index The position to insert the separator at (0-based)
  void native_menu_insert_separator(native_menu_t menu, int index) {
    return _native_menu_insert_separator(menu, index);
  }

  late final _native_menu_insert_separatorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(native_menu_t, ffi.Size)>>(
        'native_menu_insert_separator',
      );
  late final _native_menu_insert_separator = _native_menu_insert_separatorPtr
      .asFunction<void Function(native_menu_t, int)>();

  /// Get the number of items in the menu
  /// @param menu The menu
  /// @return The number of items
  int native_menu_get_item_count(native_menu_t menu) {
    return _native_menu_get_item_count(menu);
  }

  late final _native_menu_get_item_countPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(native_menu_t)>>(
        'native_menu_get_item_count',
      );
  late final _native_menu_get_item_count = _native_menu_get_item_countPtr
      .asFunction<int Function(native_menu_t)>();

  /// Get a menu item at a specific position
  /// @param menu The menu
  /// @param index The position of the item (0-based)
  /// @return The menu item handle, or NULL if index out of bounds
  native_menu_item_t native_menu_get_item_at(native_menu_t menu, int index) {
    return _native_menu_get_item_at(menu, index);
  }

  late final _native_menu_get_item_atPtr =
      _lookup<
        ffi.NativeFunction<native_menu_item_t Function(native_menu_t, ffi.Size)>
      >('native_menu_get_item_at');
  late final _native_menu_get_item_at = _native_menu_get_item_atPtr
      .asFunction<native_menu_item_t Function(native_menu_t, int)>();

  /// Get a menu item by its ID
  /// @param menu The menu
  /// @param item_id The ID of the item to find
  /// @return The menu item handle, or NULL if not found
  native_menu_item_t native_menu_get_item_by_id(
    native_menu_t menu,
    int item_id,
  ) {
    return _native_menu_get_item_by_id(menu, item_id);
  }

  late final _native_menu_get_item_by_idPtr =
      _lookup<
        ffi.NativeFunction<
          native_menu_item_t Function(native_menu_t, native_menu_item_id_t)
        >
      >('native_menu_get_item_by_id');
  late final _native_menu_get_item_by_id = _native_menu_get_item_by_idPtr
      .asFunction<native_menu_item_t Function(native_menu_t, int)>();

  /// Get all menu items
  /// @param menu The menu
  /// @return List of menu items (caller must free with native_menu_item_list_free)
  native_menu_item_list_t native_menu_get_all_items(native_menu_t menu) {
    return _native_menu_get_all_items(menu);
  }

  late final _native_menu_get_all_itemsPtr =
      _lookup<
        ffi.NativeFunction<native_menu_item_list_t Function(native_menu_t)>
      >('native_menu_get_all_items');
  late final _native_menu_get_all_items = _native_menu_get_all_itemsPtr
      .asFunction<native_menu_item_list_t Function(native_menu_t)>();

  /// Open the menu as a context menu using the specified positioning strategy
  /// @param menu The menu
  /// @param strategy The positioning strategy determining where to display the menu
  /// @param placement The placement option determining how the menu is positioned
  /// relative to the reference point (default: NATIVE_PLACEMENT_BOTTOM_START)
  /// @return true if menu was opened successfully, false otherwise
  bool native_menu_open(
    native_menu_t menu,
    native_positioning_strategy_t strategy,
    native_placement_t placement,
  ) {
    return _native_menu_open(menu, strategy, placement.value);
  }

  late final _native_menu_openPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Bool Function(
            native_menu_t,
            native_positioning_strategy_t,
            ffi.UnsignedInt,
          )
        >
      >('native_menu_open');
  late final _native_menu_open = _native_menu_openPtr
      .asFunction<
        bool Function(native_menu_t, native_positioning_strategy_t, int)
      >();

  /// Close the menu if it's currently showing
  /// @param menu The menu
  /// @return true if menu was closed, false otherwise
  bool native_menu_close(native_menu_t menu) {
    return _native_menu_close(menu);
  }

  late final _native_menu_closePtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(native_menu_t)>>(
        'native_menu_close',
      );
  late final _native_menu_close = _native_menu_closePtr
      .asFunction<bool Function(native_menu_t)>();

  /// Add event listener for a menu
  /// @param menu The menu
  /// @param event_type The type of event to listen for
  /// @param callback The callback function
  /// @param user_data User data passed to callback
  /// @return A listener ID that can be used to remove the listener, or -1 on error
  int native_menu_add_listener(
    native_menu_t menu,
    native_menu_event_type_t event_type,
    native_menu_event_callback_t callback,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _native_menu_add_listener(
      menu,
      event_type.value,
      callback,
      user_data,
    );
  }

  late final _native_menu_add_listenerPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            native_menu_t,
            ffi.UnsignedInt,
            native_menu_event_callback_t,
            ffi.Pointer<ffi.Void>,
          )
        >
      >('native_menu_add_listener');
  late final _native_menu_add_listener = _native_menu_add_listenerPtr
      .asFunction<
        int Function(
          native_menu_t,
          int,
          native_menu_event_callback_t,
          ffi.Pointer<ffi.Void>,
        )
      >();

  /// Remove event listener from a menu
  /// @param menu The menu
  /// @param listener_id The listener ID returned by native_menu_add_listener
  /// @return true if removed successfully, false otherwise
  bool native_menu_remove_listener(native_menu_t menu, int listener_id) {
    return _native_menu_remove_listener(menu, listener_id);
  }

  late final _native_menu_remove_listenerPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(native_menu_t, ffi.Int)>>(
        'native_menu_remove_listener',
      );
  late final _native_menu_remove_listener = _native_menu_remove_listenerPtr
      .asFunction<bool Function(native_menu_t, int)>();

  /// Free a menu item list
  /// @param list The list to free
  void native_menu_item_list_free(native_menu_item_list_t list) {
    return _native_menu_item_list_free(list);
  }

  late final _native_menu_item_list_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(native_menu_item_list_t)>>(
        'native_menu_item_list_free',
      );
  late final _native_menu_item_list_free = _native_menu_item_list_freePtr
      .asFunction<void Function(native_menu_item_list_t)>();

  /// Convert keyboard accelerator to string representation
  /// @param accelerator The accelerator
  /// @return The string representation (caller must free), or NULL if accelerator is invalid
  ffi.Pointer<ffi.Char> native_keyboard_accelerator_to_string(
    ffi.Pointer<native_keyboard_accelerator_t> accelerator,
  ) {
    return _native_keyboard_accelerator_to_string(accelerator);
  }

  late final _native_keyboard_accelerator_to_stringPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
            ffi.Pointer<native_keyboard_accelerator_t>,
          )
        >
      >('native_keyboard_accelerator_to_string');
  late final _native_keyboard_accelerator_to_string =
      _native_keyboard_accelerator_to_stringPtr
          .asFunction<
            ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<native_keyboard_accelerator_t>,
            )
          >();

  /// @brief Create a preferences storage with default scope.
  /// @return Handle to preferences storage, or NULL on failure
  native_preferences_t native_preferences_create() {
    return _native_preferences_create();
  }

  late final _native_preferences_createPtr =
      _lookup<ffi.NativeFunction<native_preferences_t Function()>>(
        'native_preferences_create',
      );
  late final _native_preferences_create = _native_preferences_createPtr
      .asFunction<native_preferences_t Function()>();

  /// @brief Create a preferences storage with custom scope.
  /// @param scope Scope for isolating preferences
  /// @return Handle to preferences storage, or NULL on failure
  native_preferences_t native_preferences_create_with_scope(
    ffi.Pointer<ffi.Char> scope,
  ) {
    return _native_preferences_create_with_scope(scope);
  }

  late final _native_preferences_create_with_scopePtr =
      _lookup<
        ffi.NativeFunction<native_preferences_t Function(ffi.Pointer<ffi.Char>)>
      >('native_preferences_create_with_scope');
  late final _native_preferences_create_with_scope =
      _native_preferences_create_with_scopePtr
          .asFunction<native_preferences_t Function(ffi.Pointer<ffi.Char>)>();

  /// @brief Destroy a preferences storage instance.
  /// @param prefs Handle to preferences storage
  void native_preferences_destroy(native_preferences_t prefs) {
    return _native_preferences_destroy(prefs);
  }

  late final _native_preferences_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(native_preferences_t)>>(
        'native_preferences_destroy',
      );
  late final _native_preferences_destroy = _native_preferences_destroyPtr
      .asFunction<void Function(native_preferences_t)>();

  /// @brief Set a key-value pair.
  /// @param prefs Handle to preferences storage
  /// @param key The key to set
  /// @param value The value to store
  /// @return true if successful, false otherwise
  bool native_preferences_set(
    native_preferences_t prefs,
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<ffi.Char> value,
  ) {
    return _native_preferences_set(prefs, key, value);
  }

  late final _native_preferences_setPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Bool Function(
            native_preferences_t,
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.Char>,
          )
        >
      >('native_preferences_set');
  late final _native_preferences_set = _native_preferences_setPtr
      .asFunction<
        bool Function(
          native_preferences_t,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
        )
      >();

  /// @brief Get the value for a given key.
  /// @param prefs Handle to preferences storage
  /// @param key The key to retrieve
  /// @param default_value Default value if key doesn't exist
  /// @return The stored value or default_value. Caller must free the returned string.
  ffi.Pointer<ffi.Char> native_preferences_get(
    native_preferences_t prefs,
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<ffi.Char> default_value,
  ) {
    return _native_preferences_get(prefs, key, default_value);
  }

  late final _native_preferences_getPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
            native_preferences_t,
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.Char>,
          )
        >
      >('native_preferences_get');
  late final _native_preferences_get = _native_preferences_getPtr
      .asFunction<
        ffi.Pointer<ffi.Char> Function(
          native_preferences_t,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
        )
      >();

  /// @brief Remove a key-value pair.
  /// @param prefs Handle to preferences storage
  /// @param key The key to remove
  /// @return true if successful, false if key doesn't exist
  bool native_preferences_remove(
    native_preferences_t prefs,
    ffi.Pointer<ffi.Char> key,
  ) {
    return _native_preferences_remove(prefs, key);
  }

  late final _native_preferences_removePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Bool Function(native_preferences_t, ffi.Pointer<ffi.Char>)
        >
      >('native_preferences_remove');
  late final _native_preferences_remove = _native_preferences_removePtr
      .asFunction<bool Function(native_preferences_t, ffi.Pointer<ffi.Char>)>();

  /// @brief Clear all key-value pairs.
  /// @param prefs Handle to preferences storage
  /// @return true if successful, false otherwise
  bool native_preferences_clear(native_preferences_t prefs) {
    return _native_preferences_clear(prefs);
  }

  late final _native_preferences_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(native_preferences_t)>>(
        'native_preferences_clear',
      );
  late final _native_preferences_clear = _native_preferences_clearPtr
      .asFunction<bool Function(native_preferences_t)>();

  /// @brief Check if a key exists.
  /// @param prefs Handle to preferences storage
  /// @param key The key to check
  /// @return true if key exists, false otherwise
  bool native_preferences_contains(
    native_preferences_t prefs,
    ffi.Pointer<ffi.Char> key,
  ) {
    return _native_preferences_contains(prefs, key);
  }

  late final _native_preferences_containsPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Bool Function(native_preferences_t, ffi.Pointer<ffi.Char>)
        >
      >('native_preferences_contains');
  late final _native_preferences_contains = _native_preferences_containsPtr
      .asFunction<bool Function(native_preferences_t, ffi.Pointer<ffi.Char>)>();

  /// @brief Get all keys.
  /// @param prefs Handle to preferences storage
  /// @param out_keys Pointer to array of keys (allocated by function)
  /// @param out_count Pointer to receive number of keys
  /// @return true if successful, false otherwise. Caller must free each key and the array.
  bool native_preferences_get_keys(
    native_preferences_t prefs,
    ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> out_keys,
    ffi.Pointer<ffi.Size> out_count,
  ) {
    return _native_preferences_get_keys(prefs, out_keys, out_count);
  }

  late final _native_preferences_get_keysPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Bool Function(
            native_preferences_t,
            ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>>,
            ffi.Pointer<ffi.Size>,
          )
        >
      >('native_preferences_get_keys');
  late final _native_preferences_get_keys = _native_preferences_get_keysPtr
      .asFunction<
        bool Function(
          native_preferences_t,
          ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>>,
          ffi.Pointer<ffi.Size>,
        )
      >();

  /// @brief Get the number of stored items.
  /// @param prefs Handle to preferences storage
  /// @return Number of key-value pairs
  int native_preferences_get_size(native_preferences_t prefs) {
    return _native_preferences_get_size(prefs);
  }

  late final _native_preferences_get_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(native_preferences_t)>>(
        'native_preferences_get_size',
      );
  late final _native_preferences_get_size = _native_preferences_get_sizePtr
      .asFunction<int Function(native_preferences_t)>();

  /// @brief Get the scope.
  /// @param prefs Handle to preferences storage
  /// @return The scope. Caller must free the returned string.
  ffi.Pointer<ffi.Char> native_preferences_get_scope(
    native_preferences_t prefs,
  ) {
    return _native_preferences_get_scope(prefs);
  }

  late final _native_preferences_get_scopePtr =
      _lookup<
        ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(native_preferences_t)>
      >('native_preferences_get_scope');
  late final _native_preferences_get_scope = _native_preferences_get_scopePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(native_preferences_t)>();

  /// @brief Free a string returned by preferences functions.
  /// @param str String to free
  void native_preferences_free_string(ffi.Pointer<ffi.Char> str) {
    return _native_preferences_free_string(str);
  }

  late final _native_preferences_free_stringPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
        'native_preferences_free_string',
      );
  late final _native_preferences_free_string =
      _native_preferences_free_stringPtr
          .asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  /// @brief Free a string array returned by preferences functions.
  /// @param strings Array of strings to free
  /// @param count Number of strings in the array
  void native_preferences_free_string_array(
    ffi.Pointer<ffi.Pointer<ffi.Char>> strings,
    int count,
  ) {
    return _native_preferences_free_string_array(strings, count);
  }

  late final _native_preferences_free_string_arrayPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Size)
        >
      >('native_preferences_free_string_array');
  late final _native_preferences_free_string_array =
      _native_preferences_free_string_arrayPtr
          .asFunction<void Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  /// @brief Create a secure storage with default scope.
  /// @return Handle to secure storage, or NULL on failure
  native_secure_storage_t native_secure_storage_create() {
    return _native_secure_storage_create();
  }

  late final _native_secure_storage_createPtr =
      _lookup<ffi.NativeFunction<native_secure_storage_t Function()>>(
        'native_secure_storage_create',
      );
  late final _native_secure_storage_create = _native_secure_storage_createPtr
      .asFunction<native_secure_storage_t Function()>();

  /// @brief Create a secure storage with custom scope.
  /// @param scope Scope/application identifier
  /// @return Handle to secure storage, or NULL on failure
  native_secure_storage_t native_secure_storage_create_with_scope(
    ffi.Pointer<ffi.Char> scope,
  ) {
    return _native_secure_storage_create_with_scope(scope);
  }

  late final _native_secure_storage_create_with_scopePtr =
      _lookup<
        ffi.NativeFunction<
          native_secure_storage_t Function(ffi.Pointer<ffi.Char>)
        >
      >('native_secure_storage_create_with_scope');
  late final _native_secure_storage_create_with_scope =
      _native_secure_storage_create_with_scopePtr
          .asFunction<
            native_secure_storage_t Function(ffi.Pointer<ffi.Char>)
          >();

  /// @brief Destroy a secure storage instance.
  /// @param storage Handle to secure storage
  void native_secure_storage_destroy(native_secure_storage_t storage) {
    return _native_secure_storage_destroy(storage);
  }

  late final _native_secure_storage_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(native_secure_storage_t)>>(
        'native_secure_storage_destroy',
      );
  late final _native_secure_storage_destroy = _native_secure_storage_destroyPtr
      .asFunction<void Function(native_secure_storage_t)>();

  /// @brief Set a key-value pair in secure storage.
  /// @param storage Handle to secure storage
  /// @param key The key to set
  /// @param value The value to store
  /// @return true if successful, false otherwise
  bool native_secure_storage_set(
    native_secure_storage_t storage,
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<ffi.Char> value,
  ) {
    return _native_secure_storage_set(storage, key, value);
  }

  late final _native_secure_storage_setPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Bool Function(
            native_secure_storage_t,
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.Char>,
          )
        >
      >('native_secure_storage_set');
  late final _native_secure_storage_set = _native_secure_storage_setPtr
      .asFunction<
        bool Function(
          native_secure_storage_t,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
        )
      >();

  /// @brief Get the value for a given key from secure storage.
  /// @param storage Handle to secure storage
  /// @param key The key to retrieve
  /// @param default_value Default value if key doesn't exist
  /// @return The stored value or default_value. Caller must free the returned string.
  ffi.Pointer<ffi.Char> native_secure_storage_get(
    native_secure_storage_t storage,
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<ffi.Char> default_value,
  ) {
    return _native_secure_storage_get(storage, key, default_value);
  }

  late final _native_secure_storage_getPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
            native_secure_storage_t,
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.Char>,
          )
        >
      >('native_secure_storage_get');
  late final _native_secure_storage_get = _native_secure_storage_getPtr
      .asFunction<
        ffi.Pointer<ffi.Char> Function(
          native_secure_storage_t,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
        )
      >();

  /// @brief Remove a key-value pair from secure storage.
  /// @param storage Handle to secure storage
  /// @param key The key to remove
  /// @return true if successful, false if key doesn't exist
  bool native_secure_storage_remove(
    native_secure_storage_t storage,
    ffi.Pointer<ffi.Char> key,
  ) {
    return _native_secure_storage_remove(storage, key);
  }

  late final _native_secure_storage_removePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Bool Function(native_secure_storage_t, ffi.Pointer<ffi.Char>)
        >
      >('native_secure_storage_remove');
  late final _native_secure_storage_remove = _native_secure_storage_removePtr
      .asFunction<
        bool Function(native_secure_storage_t, ffi.Pointer<ffi.Char>)
      >();

  /// @brief Clear all key-value pairs from secure storage.
  /// @param storage Handle to secure storage
  /// @return true if successful, false otherwise
  bool native_secure_storage_clear(native_secure_storage_t storage) {
    return _native_secure_storage_clear(storage);
  }

  late final _native_secure_storage_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(native_secure_storage_t)>>(
        'native_secure_storage_clear',
      );
  late final _native_secure_storage_clear = _native_secure_storage_clearPtr
      .asFunction<bool Function(native_secure_storage_t)>();

  /// @brief Check if a key exists in secure storage.
  /// @param storage Handle to secure storage
  /// @param key The key to check
  /// @return true if key exists, false otherwise
  bool native_secure_storage_contains(
    native_secure_storage_t storage,
    ffi.Pointer<ffi.Char> key,
  ) {
    return _native_secure_storage_contains(storage, key);
  }

  late final _native_secure_storage_containsPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Bool Function(native_secure_storage_t, ffi.Pointer<ffi.Char>)
        >
      >('native_secure_storage_contains');
  late final _native_secure_storage_contains =
      _native_secure_storage_containsPtr
          .asFunction<
            bool Function(native_secure_storage_t, ffi.Pointer<ffi.Char>)
          >();

  /// @brief Get all keys from secure storage.
  /// @param storage Handle to secure storage
  /// @param out_keys Pointer to array of keys (allocated by function)
  /// @param out_count Pointer to receive number of keys
  /// @return true if successful, false otherwise. Caller must free each key and the array.
  bool native_secure_storage_get_keys(
    native_secure_storage_t storage,
    ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> out_keys,
    ffi.Pointer<ffi.Size> out_count,
  ) {
    return _native_secure_storage_get_keys(storage, out_keys, out_count);
  }

  late final _native_secure_storage_get_keysPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Bool Function(
            native_secure_storage_t,
            ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>>,
            ffi.Pointer<ffi.Size>,
          )
        >
      >('native_secure_storage_get_keys');
  late final _native_secure_storage_get_keys =
      _native_secure_storage_get_keysPtr
          .asFunction<
            bool Function(
              native_secure_storage_t,
              ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>>,
              ffi.Pointer<ffi.Size>,
            )
          >();

  /// @brief Get the number of stored items in secure storage.
  /// @param storage Handle to secure storage
  /// @return Number of key-value pairs
  int native_secure_storage_get_size(native_secure_storage_t storage) {
    return _native_secure_storage_get_size(storage);
  }

  late final _native_secure_storage_get_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(native_secure_storage_t)>>(
        'native_secure_storage_get_size',
      );
  late final _native_secure_storage_get_size =
      _native_secure_storage_get_sizePtr
          .asFunction<int Function(native_secure_storage_t)>();

  /// @brief Get the scope.
  /// @param storage Handle to secure storage
  /// @return The scope. Caller must free the returned string.
  ffi.Pointer<ffi.Char> native_secure_storage_get_scope(
    native_secure_storage_t storage,
  ) {
    return _native_secure_storage_get_scope(storage);
  }

  late final _native_secure_storage_get_scopePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(native_secure_storage_t)
        >
      >('native_secure_storage_get_scope');
  late final _native_secure_storage_get_scope =
      _native_secure_storage_get_scopePtr
          .asFunction<
            ffi.Pointer<ffi.Char> Function(native_secure_storage_t)
          >();

  /// @brief Check if secure storage is available on this platform.
  /// @return true if platform supports secure storage, false otherwise
  bool native_secure_storage_is_available() {
    return _native_secure_storage_is_available();
  }

  late final _native_secure_storage_is_availablePtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>(
        'native_secure_storage_is_available',
      );
  late final _native_secure_storage_is_available =
      _native_secure_storage_is_availablePtr.asFunction<bool Function()>();

  /// @brief Free a string returned by secure storage functions.
  /// @param str String to free
  void native_secure_storage_free_string(ffi.Pointer<ffi.Char> str) {
    return _native_secure_storage_free_string(str);
  }

  late final _native_secure_storage_free_stringPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
        'native_secure_storage_free_string',
      );
  late final _native_secure_storage_free_string =
      _native_secure_storage_free_stringPtr
          .asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  /// @brief Free a string array returned by secure storage functions.
  /// @param strings Array of strings to free
  /// @param count Number of strings in the array
  void native_secure_storage_free_string_array(
    ffi.Pointer<ffi.Pointer<ffi.Char>> strings,
    int count,
  ) {
    return _native_secure_storage_free_string_array(strings, count);
  }

  late final _native_secure_storage_free_string_arrayPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Size)
        >
      >('native_secure_storage_free_string_array');
  late final _native_secure_storage_free_string_array =
      _native_secure_storage_free_string_arrayPtr
          .asFunction<void Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  /// Free a C string allocated by to_c_str
  /// @param str The string to free (can be nullptr)
  void free_c_str(ffi.Pointer<ffi.Char> str) {
    return _free_c_str(str);
  }

  late final _free_c_strPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
        'free_c_str',
      );
  late final _free_c_str = _free_c_strPtr
      .asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  /// Create a new tray icon
  /// @return Tray icon handle, or NULL if creation failed
  native_tray_icon_t native_tray_icon_create() {
    return _native_tray_icon_create();
  }

  late final _native_tray_icon_createPtr =
      _lookup<ffi.NativeFunction<native_tray_icon_t Function()>>(
        'native_tray_icon_create',
      );
  late final _native_tray_icon_create = _native_tray_icon_createPtr
      .asFunction<native_tray_icon_t Function()>();

  /// Create a tray icon from a native platform object
  /// @param native_tray Pointer to platform-specific tray icon object
  /// @return Tray icon handle, or NULL if creation failed
  native_tray_icon_t native_tray_icon_create_from_native(
    ffi.Pointer<ffi.Void> native_tray,
  ) {
    return _native_tray_icon_create_from_native(native_tray);
  }

  late final _native_tray_icon_create_from_nativePtr =
      _lookup<
        ffi.NativeFunction<native_tray_icon_t Function(ffi.Pointer<ffi.Void>)>
      >('native_tray_icon_create_from_native');
  late final _native_tray_icon_create_from_native =
      _native_tray_icon_create_from_nativePtr
          .asFunction<native_tray_icon_t Function(ffi.Pointer<ffi.Void>)>();

  /// Destroy a tray icon and release its resources
  /// @param tray_icon The tray icon to destroy
  void native_tray_icon_destroy(native_tray_icon_t tray_icon) {
    return _native_tray_icon_destroy(tray_icon);
  }

  late final _native_tray_icon_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(native_tray_icon_t)>>(
        'native_tray_icon_destroy',
      );
  late final _native_tray_icon_destroy = _native_tray_icon_destroyPtr
      .asFunction<void Function(native_tray_icon_t)>();

  /// Get the ID of a tray icon
  /// @param tray_icon The tray icon
  /// @return The tray icon ID
  int native_tray_icon_get_id(native_tray_icon_t tray_icon) {
    return _native_tray_icon_get_id(tray_icon);
  }

  late final _native_tray_icon_get_idPtr =
      _lookup<
        ffi.NativeFunction<native_tray_icon_id_t Function(native_tray_icon_t)>
      >('native_tray_icon_get_id');
  late final _native_tray_icon_get_id = _native_tray_icon_get_idPtr
      .asFunction<int Function(native_tray_icon_t)>();

  /// Set the icon image for the tray icon using an Image object
  /// @param tray_icon The tray icon
  /// @param image The Image object to set as the icon, or NULL to clear the icon
  void native_tray_icon_set_icon(
    native_tray_icon_t tray_icon,
    native_image_t image,
  ) {
    return _native_tray_icon_set_icon(tray_icon, image);
  }

  late final _native_tray_icon_set_iconPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(native_tray_icon_t, native_image_t)
        >
      >('native_tray_icon_set_icon');
  late final _native_tray_icon_set_icon = _native_tray_icon_set_iconPtr
      .asFunction<void Function(native_tray_icon_t, native_image_t)>();

  /// Get the current icon image of the tray icon
  /// @param tray_icon The tray icon
  /// @return The Image object, or NULL if no icon is set. Caller must call
  /// native_image_destroy() when done.
  native_image_t native_tray_icon_get_icon(native_tray_icon_t tray_icon) {
    return _native_tray_icon_get_icon(tray_icon);
  }

  late final _native_tray_icon_get_iconPtr =
      _lookup<ffi.NativeFunction<native_image_t Function(native_tray_icon_t)>>(
        'native_tray_icon_get_icon',
      );
  late final _native_tray_icon_get_icon = _native_tray_icon_get_iconPtr
      .asFunction<native_image_t Function(native_tray_icon_t)>();

  /// Set the title text for the tray icon
  /// @param tray_icon The tray icon
  /// @param title The title text to set, or NULL to clear the title
  void native_tray_icon_set_title(
    native_tray_icon_t tray_icon,
    ffi.Pointer<ffi.Char> title,
  ) {
    return _native_tray_icon_set_title(tray_icon, title);
  }

  late final _native_tray_icon_set_titlePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(native_tray_icon_t, ffi.Pointer<ffi.Char>)
        >
      >('native_tray_icon_set_title');
  late final _native_tray_icon_set_title = _native_tray_icon_set_titlePtr
      .asFunction<void Function(native_tray_icon_t, ffi.Pointer<ffi.Char>)>();

  /// Get the title text of the tray icon
  /// @param tray_icon The tray icon
  /// @return The title text, or NULL if no title is set or error. Caller must free
  /// the returned string.
  ffi.Pointer<ffi.Char> native_tray_icon_get_title(
    native_tray_icon_t tray_icon,
  ) {
    return _native_tray_icon_get_title(tray_icon);
  }

  late final _native_tray_icon_get_titlePtr =
      _lookup<
        ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(native_tray_icon_t)>
      >('native_tray_icon_get_title');
  late final _native_tray_icon_get_title = _native_tray_icon_get_titlePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(native_tray_icon_t)>();

  /// Set the tooltip text for the tray icon
  /// @param tray_icon The tray icon
  /// @param tooltip The tooltip text to set, or NULL to clear the tooltip
  void native_tray_icon_set_tooltip(
    native_tray_icon_t tray_icon,
    ffi.Pointer<ffi.Char> tooltip,
  ) {
    return _native_tray_icon_set_tooltip(tray_icon, tooltip);
  }

  late final _native_tray_icon_set_tooltipPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(native_tray_icon_t, ffi.Pointer<ffi.Char>)
        >
      >('native_tray_icon_set_tooltip');
  late final _native_tray_icon_set_tooltip = _native_tray_icon_set_tooltipPtr
      .asFunction<void Function(native_tray_icon_t, ffi.Pointer<ffi.Char>)>();

  /// Get the tooltip text of the tray icon
  /// @param tray_icon The tray icon
  /// @return The tooltip text, or NULL if no tooltip is set or error. Caller must
  /// free the returned string.
  ffi.Pointer<ffi.Char> native_tray_icon_get_tooltip(
    native_tray_icon_t tray_icon,
  ) {
    return _native_tray_icon_get_tooltip(tray_icon);
  }

  late final _native_tray_icon_get_tooltipPtr =
      _lookup<
        ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(native_tray_icon_t)>
      >('native_tray_icon_get_tooltip');
  late final _native_tray_icon_get_tooltip = _native_tray_icon_get_tooltipPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(native_tray_icon_t)>();

  /// Set the context menu for the tray icon
  /// @param tray_icon The tray icon
  /// @param menu The context menu to set
  void native_tray_icon_set_context_menu(
    native_tray_icon_t tray_icon,
    native_menu_t menu,
  ) {
    return _native_tray_icon_set_context_menu(tray_icon, menu);
  }

  late final _native_tray_icon_set_context_menuPtr =
      _lookup<
        ffi.NativeFunction<ffi.Void Function(native_tray_icon_t, native_menu_t)>
      >('native_tray_icon_set_context_menu');
  late final _native_tray_icon_set_context_menu =
      _native_tray_icon_set_context_menuPtr
          .asFunction<void Function(native_tray_icon_t, native_menu_t)>();

  /// Get the context menu of the tray icon
  /// @param tray_icon The tray icon
  /// @return The context menu handle, or NULL if no menu set
  native_menu_t native_tray_icon_get_context_menu(
    native_tray_icon_t tray_icon,
  ) {
    return _native_tray_icon_get_context_menu(tray_icon);
  }

  late final _native_tray_icon_get_context_menuPtr =
      _lookup<ffi.NativeFunction<native_menu_t Function(native_tray_icon_t)>>(
        'native_tray_icon_get_context_menu',
      );
  late final _native_tray_icon_get_context_menu =
      _native_tray_icon_get_context_menuPtr
          .asFunction<native_menu_t Function(native_tray_icon_t)>();

  /// Get the screen bounds of the tray icon
  /// @param tray_icon The tray icon
  /// @param bounds Pointer to store the bounds (caller allocated)
  /// @return true if bounds were retrieved successfully, false otherwise
  bool native_tray_icon_get_bounds(
    native_tray_icon_t tray_icon,
    ffi.Pointer<native_rectangle_t> bounds,
  ) {
    return _native_tray_icon_get_bounds(tray_icon, bounds);
  }

  late final _native_tray_icon_get_boundsPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Bool Function(native_tray_icon_t, ffi.Pointer<native_rectangle_t>)
        >
      >('native_tray_icon_get_bounds');
  late final _native_tray_icon_get_bounds = _native_tray_icon_get_boundsPtr
      .asFunction<
        bool Function(native_tray_icon_t, ffi.Pointer<native_rectangle_t>)
      >();

  /// Set the visibility of the tray icon in the system tray
  /// @param tray_icon The tray icon
  /// @param visible true to show the icon, false to hide it
  /// @return true if visibility was changed successfully, false otherwise
  bool native_tray_icon_set_visible(
    native_tray_icon_t tray_icon,
    bool visible,
  ) {
    return _native_tray_icon_set_visible(tray_icon, visible);
  }

  late final _native_tray_icon_set_visiblePtr =
      _lookup<
        ffi.NativeFunction<ffi.Bool Function(native_tray_icon_t, ffi.Bool)>
      >('native_tray_icon_set_visible');
  late final _native_tray_icon_set_visible = _native_tray_icon_set_visiblePtr
      .asFunction<bool Function(native_tray_icon_t, bool)>();

  /// Check if the tray icon is currently visible
  /// @param tray_icon The tray icon
  /// @return true if visible, false otherwise
  bool native_tray_icon_is_visible(native_tray_icon_t tray_icon) {
    return _native_tray_icon_is_visible(tray_icon);
  }

  late final _native_tray_icon_is_visiblePtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(native_tray_icon_t)>>(
        'native_tray_icon_is_visible',
      );
  late final _native_tray_icon_is_visible = _native_tray_icon_is_visiblePtr
      .asFunction<bool Function(native_tray_icon_t)>();

  /// Add an event listener for tray icon events
  /// @param tray_icon The tray icon
  /// @param event_type The type of event to listen for
  /// @param callback The callback function
  /// @param user_data User data to pass to callback
  /// @return Listener ID that can be used to remove the listener, or -1 on error
  int native_tray_icon_add_listener(
    native_tray_icon_t tray_icon,
    native_tray_icon_event_type_t event_type,
    native_tray_icon_event_callback_t callback,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _native_tray_icon_add_listener(
      tray_icon,
      event_type.value,
      callback,
      user_data,
    );
  }

  late final _native_tray_icon_add_listenerPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            native_tray_icon_t,
            ffi.UnsignedInt,
            native_tray_icon_event_callback_t,
            ffi.Pointer<ffi.Void>,
          )
        >
      >('native_tray_icon_add_listener');
  late final _native_tray_icon_add_listener = _native_tray_icon_add_listenerPtr
      .asFunction<
        int Function(
          native_tray_icon_t,
          int,
          native_tray_icon_event_callback_t,
          ffi.Pointer<ffi.Void>,
        )
      >();

  /// Remove an event listener
  /// @param tray_icon The tray icon
  /// @param listener_id The listener ID returned by add_listener
  /// @return true if the listener was found and removed, false otherwise
  bool native_tray_icon_remove_listener(
    native_tray_icon_t tray_icon,
    int listener_id,
  ) {
    return _native_tray_icon_remove_listener(tray_icon, listener_id);
  }

  late final _native_tray_icon_remove_listenerPtr =
      _lookup<
        ffi.NativeFunction<ffi.Bool Function(native_tray_icon_t, ffi.Int)>
      >('native_tray_icon_remove_listener');
  late final _native_tray_icon_remove_listener =
      _native_tray_icon_remove_listenerPtr
          .asFunction<bool Function(native_tray_icon_t, int)>();

  /// Open the context menu at default location
  /// @param tray_icon The tray icon
  /// @return true if menu was opened successfully, false otherwise
  bool native_tray_icon_open_context_menu(native_tray_icon_t tray_icon) {
    return _native_tray_icon_open_context_menu(tray_icon);
  }

  late final _native_tray_icon_open_context_menuPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(native_tray_icon_t)>>(
        'native_tray_icon_open_context_menu',
      );
  late final _native_tray_icon_open_context_menu =
      _native_tray_icon_open_context_menuPtr
          .asFunction<bool Function(native_tray_icon_t)>();

  /// Close the currently displayed context menu
  /// @param tray_icon The tray icon
  /// @return true if menu was closed successfully or wasn't visible, false on
  /// error
  bool native_tray_icon_close_context_menu(native_tray_icon_t tray_icon) {
    return _native_tray_icon_close_context_menu(tray_icon);
  }

  late final _native_tray_icon_close_context_menuPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(native_tray_icon_t)>>(
        'native_tray_icon_close_context_menu',
      );
  late final _native_tray_icon_close_context_menu =
      _native_tray_icon_close_context_menuPtr
          .asFunction<bool Function(native_tray_icon_t)>();

  /// Check if system tray is supported on the current platform
  /// @return true if system tray is supported, false otherwise
  bool native_tray_manager_is_supported() {
    return _native_tray_manager_is_supported();
  }

  late final _native_tray_manager_is_supportedPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>(
        'native_tray_manager_is_supported',
      );
  late final _native_tray_manager_is_supported =
      _native_tray_manager_is_supportedPtr.asFunction<bool Function()>();

  /// Get a tray icon by its ID
  /// @param tray_icon_id The tray icon ID
  /// @return Tray icon handle, or NULL if not found
  native_tray_icon_t native_tray_manager_get(int tray_icon_id) {
    return _native_tray_manager_get(tray_icon_id);
  }

  late final _native_tray_manager_getPtr =
      _lookup<
        ffi.NativeFunction<native_tray_icon_t Function(native_tray_icon_id_t)>
      >('native_tray_manager_get');
  late final _native_tray_manager_get = _native_tray_manager_getPtr
      .asFunction<native_tray_icon_t Function(int)>();

  /// Get all managed tray icons
  /// @return List of all tray icons (caller must free with native_tray_icon_list_free)
  native_tray_icon_list_t native_tray_manager_get_all() {
    return _native_tray_manager_get_all();
  }

  late final _native_tray_manager_get_allPtr =
      _lookup<ffi.NativeFunction<native_tray_icon_list_t Function()>>(
        'native_tray_manager_get_all',
      );
  late final _native_tray_manager_get_all = _native_tray_manager_get_allPtr
      .asFunction<native_tray_icon_list_t Function()>();

  /// Free a tray icon list
  /// @param list The list to free
  void native_tray_icon_list_free(native_tray_icon_list_t list) {
    return _native_tray_icon_list_free(list);
  }

  late final _native_tray_icon_list_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(native_tray_icon_list_t)>>(
        'native_tray_icon_list_free',
      );
  late final _native_tray_icon_list_free = _native_tray_icon_list_freePtr
      .asFunction<void Function(native_tray_icon_list_t)>();

  /// Create a new window with the specified options
  /// @param options Window creation options
  /// @return Window handle, or NULL if creation failed
  native_window_t native_window_manager_create(
    ffi.Pointer<native_window_options_t> options,
  ) {
    return _native_window_manager_create(options);
  }

  late final _native_window_manager_createPtr =
      _lookup<
        ffi.NativeFunction<
          native_window_t Function(ffi.Pointer<native_window_options_t>)
        >
      >('native_window_manager_create');
  late final _native_window_manager_create = _native_window_manager_createPtr
      .asFunction<
        native_window_t Function(ffi.Pointer<native_window_options_t>)
      >();

  /// Get a window by its ID
  /// @param window_id The window ID
  /// @return Window handle, or NULL if not found
  native_window_t native_window_manager_get(int window_id) {
    return _native_window_manager_get(window_id);
  }

  late final _native_window_manager_getPtr =
      _lookup<ffi.NativeFunction<native_window_t Function(native_window_id_t)>>(
        'native_window_manager_get',
      );
  late final _native_window_manager_get = _native_window_manager_getPtr
      .asFunction<native_window_t Function(int)>();

  /// Get all managed windows
  /// @return List of all windows (caller must free with native_window_list_free)
  native_window_list_t native_window_manager_get_all() {
    return _native_window_manager_get_all();
  }

  late final _native_window_manager_get_allPtr =
      _lookup<ffi.NativeFunction<native_window_list_t Function()>>(
        'native_window_manager_get_all',
      );
  late final _native_window_manager_get_all = _native_window_manager_get_allPtr
      .asFunction<native_window_list_t Function()>();

  /// Get the currently active/focused window
  /// @return Current window handle, or NULL if no window is active
  native_window_t native_window_manager_get_current() {
    return _native_window_manager_get_current();
  }

  late final _native_window_manager_get_currentPtr =
      _lookup<ffi.NativeFunction<native_window_t Function()>>(
        'native_window_manager_get_current',
      );
  late final _native_window_manager_get_current =
      _native_window_manager_get_currentPtr
          .asFunction<native_window_t Function()>();

  /// Destroy a window by its ID
  /// @param window_id The window ID to destroy
  /// @return true if window was found and destroyed, false otherwise
  bool native_window_manager_destroy(int window_id) {
    return _native_window_manager_destroy(window_id);
  }

  late final _native_window_manager_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(native_window_id_t)>>(
        'native_window_manager_destroy',
      );
  late final _native_window_manager_destroy = _native_window_manager_destroyPtr
      .asFunction<bool Function(int)>();

  /// Register a callback for window events
  /// @param callback The callback function to register
  /// @param user_data User data to pass to the callback
  /// @return Registration ID, or -1 on failure
  int native_window_manager_register_event_callback(
    native_window_event_callback_t callback,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _native_window_manager_register_event_callback(callback, user_data);
  }

  late final _native_window_manager_register_event_callbackPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            native_window_event_callback_t,
            ffi.Pointer<ffi.Void>,
          )
        >
      >('native_window_manager_register_event_callback');
  late final _native_window_manager_register_event_callback =
      _native_window_manager_register_event_callbackPtr
          .asFunction<
            int Function(native_window_event_callback_t, ffi.Pointer<ffi.Void>)
          >();

  /// Unregister a window event callback
  /// @param registration_id The registration ID returned by register_event_callback
  /// @return true if callback was found and unregistered, false otherwise
  bool native_window_manager_unregister_event_callback(int registration_id) {
    return _native_window_manager_unregister_event_callback(registration_id);
  }

  late final _native_window_manager_unregister_event_callbackPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Int)>>(
        'native_window_manager_unregister_event_callback',
      );
  late final _native_window_manager_unregister_event_callback =
      _native_window_manager_unregister_event_callbackPtr
          .asFunction<bool Function(int)>();

  /// Shutdown the window manager and cleanup resources
  void native_window_manager_shutdown() {
    return _native_window_manager_shutdown();
  }

  late final _native_window_manager_shutdownPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
        'native_window_manager_shutdown',
      );
  late final _native_window_manager_shutdown =
      _native_window_manager_shutdownPtr.asFunction<void Function()>();
}

/// Representation of a point
final class native_point_t extends ffi.Struct {
  @ffi.Double()
  external double x;

  @ffi.Double()
  external double y;
}

/// Representation of a point
final class native_size_t extends ffi.Struct {
  @ffi.Double()
  external double width;

  @ffi.Double()
  external double height;
}

/// Representation of a rectangle
final class native_rectangle_t extends ffi.Struct {
  @ffi.Double()
  external double x;

  @ffi.Double()
  external double y;

  @ffi.Double()
  external double width;

  @ffi.Double()
  external double height;
}

/// Placement options for positioning UI elements relative to an anchor.
enum native_placement_t {
  /// Position above the anchor, horizontally centered.
  NATIVE_PLACEMENT_TOP(0),

  /// Position above the anchor, aligned to the start (left).
  NATIVE_PLACEMENT_TOP_START(1),

  /// Position above the anchor, aligned to the end (right).
  NATIVE_PLACEMENT_TOP_END(2),

  /// Position to the right of the anchor, vertically centered.
  NATIVE_PLACEMENT_RIGHT(3),

  /// Position to the right of the anchor, aligned to the start (top).
  NATIVE_PLACEMENT_RIGHT_START(4),

  /// Position to the right of the anchor, aligned to the end (bottom).
  NATIVE_PLACEMENT_RIGHT_END(5),

  /// Position below the anchor, horizontally centered.
  NATIVE_PLACEMENT_BOTTOM(6),

  /// Position below the anchor, aligned to the start (left).
  NATIVE_PLACEMENT_BOTTOM_START(7),

  /// Position below the anchor, aligned to the end (right).
  NATIVE_PLACEMENT_BOTTOM_END(8),

  /// Position to the left of the anchor, vertically centered.
  NATIVE_PLACEMENT_LEFT(9),

  /// Position to the left of the anchor, aligned to the start (top).
  NATIVE_PLACEMENT_LEFT_START(10),

  /// Position to the left of the anchor, aligned to the end (bottom).
  NATIVE_PLACEMENT_LEFT_END(11);

  final int value;
  const native_placement_t(this.value);

  static native_placement_t fromValue(int value) => switch (value) {
    0 => NATIVE_PLACEMENT_TOP,
    1 => NATIVE_PLACEMENT_TOP_START,
    2 => NATIVE_PLACEMENT_TOP_END,
    3 => NATIVE_PLACEMENT_RIGHT,
    4 => NATIVE_PLACEMENT_RIGHT_START,
    5 => NATIVE_PLACEMENT_RIGHT_END,
    6 => NATIVE_PLACEMENT_BOTTOM,
    7 => NATIVE_PLACEMENT_BOTTOM_START,
    8 => NATIVE_PLACEMENT_BOTTOM_END,
    9 => NATIVE_PLACEMENT_LEFT,
    10 => NATIVE_PLACEMENT_LEFT_START,
    11 => NATIVE_PLACEMENT_LEFT_END,
    _ => throw ArgumentError("Unknown value for native_placement_t: $value"),
  };
}

/// Window options structure for creating windows
final class native_window_options_t extends ffi.Struct {
  /// Window title
  external ffi.Pointer<ffi.Char> title;

  /// Initial window size
  external native_size_t size;

  /// Minimum window size
  external native_size_t minimum_size;

  /// Maximum window size
  external native_size_t maximum_size;

  /// Whether to center the window on screen
  @ffi.Bool()
  external bool centered;
}

/// Window list structure
final class native_window_list_t extends ffi.Struct {
  external ffi.Pointer<native_window_t> windows;

  @ffi.Long()
  external int count;
}

/// Opaque window handle
typedef native_window_t = ffi.Pointer<ffi.Void>;

/// Window ID type
typedef native_window_id_t = ffi.Long;
typedef Dartnative_window_id_t = int;

/// @brief Application event types
enum native_application_event_type_t {
  NATIVE_APPLICATION_EVENT_STARTED(0),
  NATIVE_APPLICATION_EVENT_EXITING(1),
  NATIVE_APPLICATION_EVENT_ACTIVATED(2),
  NATIVE_APPLICATION_EVENT_DEACTIVATED(3),
  NATIVE_APPLICATION_EVENT_QUIT_REQUESTED(4);

  final int value;
  const native_application_event_type_t(this.value);

  static native_application_event_type_t fromValue(int value) =>
      switch (value) {
        0 => NATIVE_APPLICATION_EVENT_STARTED,
        1 => NATIVE_APPLICATION_EVENT_EXITING,
        2 => NATIVE_APPLICATION_EVENT_ACTIVATED,
        3 => NATIVE_APPLICATION_EVENT_DEACTIVATED,
        4 => NATIVE_APPLICATION_EVENT_QUIT_REQUESTED,
        _ => throw ArgumentError(
          "Unknown value for native_application_event_type_t: $value",
        ),
      };
}

/// @brief Application event structure
final class native_application_event_t extends ffi.Struct {
  @ffi.UnsignedInt()
  external int type;

  /// For EXITING event
  @ffi.Int()
  external int exit_code;
}

/// @brief Opaque handle for the Application instance
typedef native_application_t = ffi.Pointer<ffi.Void>;

/// @brief Application event callback function type
typedef native_application_event_callback_t =
    ffi.Pointer<
      ffi.NativeFunction<native_application_event_callback_tFunction>
    >;
typedef native_application_event_callback_tFunction =
    ffi.Void Function(ffi.Pointer<native_application_event_t> event);
typedef Dartnative_application_event_callback_tFunction =
    void Function(ffi.Pointer<native_application_event_t> event);

/// Display orientation enumeration
enum native_display_orientation_t {
  NATIVE_DISPLAY_ORIENTATION_PORTRAIT(0),
  NATIVE_DISPLAY_ORIENTATION_LANDSCAPE(90),
  NATIVE_DISPLAY_ORIENTATION_PORTRAIT_FLIPPED(180),
  NATIVE_DISPLAY_ORIENTATION_LANDSCAPE_FLIPPED(270);

  final int value;
  const native_display_orientation_t(this.value);

  static native_display_orientation_t fromValue(int value) => switch (value) {
    0 => NATIVE_DISPLAY_ORIENTATION_PORTRAIT,
    90 => NATIVE_DISPLAY_ORIENTATION_LANDSCAPE,
    180 => NATIVE_DISPLAY_ORIENTATION_PORTRAIT_FLIPPED,
    270 => NATIVE_DISPLAY_ORIENTATION_LANDSCAPE_FLIPPED,
    _ => throw ArgumentError(
      "Unknown value for native_display_orientation_t: $value",
    ),
  };
}

/// Display list structure
final class native_display_list_t extends ffi.Struct {
  external ffi.Pointer<native_display_t> displays;

  @ffi.Long()
  external int count;
}

/// Opaque display handle
/// Align with window handle design: use a raw pointer to underlying C++ type
typedef native_display_t = ffi.Pointer<ffi.Void>;

/// Opaque handle for image objects
typedef native_image_t = ffi.Pointer<ffi.Void>;

/// Type of positioning strategy
enum native_positioning_strategy_type_t {
  NATIVE_POSITIONING_ABSOLUTE(0),
  NATIVE_POSITIONING_CURSOR_POSITION(1),
  NATIVE_POSITIONING_RELATIVE(2);

  final int value;
  const native_positioning_strategy_type_t(this.value);

  static native_positioning_strategy_type_t fromValue(int value) =>
      switch (value) {
        0 => NATIVE_POSITIONING_ABSOLUTE,
        1 => NATIVE_POSITIONING_CURSOR_POSITION,
        2 => NATIVE_POSITIONING_RELATIVE,
        _ => throw ArgumentError(
          "Unknown value for native_positioning_strategy_type_t: $value",
        ),
      };
}

/// Opaque handle for positioning strategy
typedef native_positioning_strategy_t = ffi.Pointer<ffi.Void>;

/// Menu item types
enum native_menu_item_type_t {
  NATIVE_MENU_ITEM_TYPE_NORMAL(0),
  NATIVE_MENU_ITEM_TYPE_CHECKBOX(1),
  NATIVE_MENU_ITEM_TYPE_RADIO(2),
  NATIVE_MENU_ITEM_TYPE_SEPARATOR(3),
  NATIVE_MENU_ITEM_TYPE_SUBMENU(4);

  final int value;
  const native_menu_item_type_t(this.value);

  static native_menu_item_type_t fromValue(int value) => switch (value) {
    0 => NATIVE_MENU_ITEM_TYPE_NORMAL,
    1 => NATIVE_MENU_ITEM_TYPE_CHECKBOX,
    2 => NATIVE_MENU_ITEM_TYPE_RADIO,
    3 => NATIVE_MENU_ITEM_TYPE_SEPARATOR,
    4 => NATIVE_MENU_ITEM_TYPE_SUBMENU,
    _ => throw ArgumentError(
      "Unknown value for native_menu_item_type_t: $value",
    ),
  };
}

/// Menu item states
enum native_menu_item_state_t {
  NATIVE_MENU_ITEM_STATE_UNCHECKED(0),
  NATIVE_MENU_ITEM_STATE_CHECKED(1),
  NATIVE_MENU_ITEM_STATE_MIXED(2);

  final int value;
  const native_menu_item_state_t(this.value);

  static native_menu_item_state_t fromValue(int value) => switch (value) {
    0 => NATIVE_MENU_ITEM_STATE_UNCHECKED,
    1 => NATIVE_MENU_ITEM_STATE_CHECKED,
    2 => NATIVE_MENU_ITEM_STATE_MIXED,
    _ => throw ArgumentError(
      "Unknown value for native_menu_item_state_t: $value",
    ),
  };
}

/// Keyboard accelerator modifier flags
enum native_accelerator_modifier_t {
  NATIVE_ACCELERATOR_MODIFIER_NONE(0),
  NATIVE_ACCELERATOR_MODIFIER_CTRL(1),
  NATIVE_ACCELERATOR_MODIFIER_ALT(2),
  NATIVE_ACCELERATOR_MODIFIER_SHIFT(4),
  NATIVE_ACCELERATOR_MODIFIER_META(8);

  final int value;
  const native_accelerator_modifier_t(this.value);

  static native_accelerator_modifier_t fromValue(int value) => switch (value) {
    0 => NATIVE_ACCELERATOR_MODIFIER_NONE,
    1 => NATIVE_ACCELERATOR_MODIFIER_CTRL,
    2 => NATIVE_ACCELERATOR_MODIFIER_ALT,
    4 => NATIVE_ACCELERATOR_MODIFIER_SHIFT,
    8 => NATIVE_ACCELERATOR_MODIFIER_META,
    _ => throw ArgumentError(
      "Unknown value for native_accelerator_modifier_t: $value",
    ),
  };
}

/// Keyboard accelerator structure
final class native_keyboard_accelerator_t extends ffi.Struct {
  @ffi.Int()
  external int modifiers;

  @ffi.Array.multi([64])
  external ffi.Array<ffi.Char> key;
}

/// Menu item clicked event
final class native_menu_item_clicked_event_t extends ffi.Struct {
  @native_menu_item_id_t()
  external int item_id;
}

typedef native_menu_item_id_t = ffi.Long;
typedef Dartnative_menu_item_id_t = int;

/// Menu item submenu opened event
final class native_menu_item_submenu_opened_event_t extends ffi.Struct {
  @native_menu_item_id_t()
  external int item_id;
}

/// Menu item submenu closed event
final class native_menu_item_submenu_closed_event_t extends ffi.Struct {
  @native_menu_item_id_t()
  external int item_id;
}

/// Menu item list structure
final class native_menu_item_list_t extends ffi.Struct {
  external ffi.Pointer<native_menu_item_t> items;

  @ffi.Size()
  external int count;
}

typedef native_menu_item_t = ffi.Pointer<ffi.Void>;

/// Menu opened event
final class native_menu_opened_event_t extends ffi.Struct {
  @native_menu_id_t()
  external int menu_id;
}

/// Menu and menu item identifiers
typedef native_menu_id_t = ffi.Long;
typedef Dartnative_menu_id_t = int;

/// Menu closed event
final class native_menu_closed_event_t extends ffi.Struct {
  @native_menu_id_t()
  external int menu_id;
}

/// Event types for menu item events
enum native_menu_item_event_type_t {
  NATIVE_MENU_ITEM_EVENT_CLICKED(0),
  NATIVE_MENU_ITEM_EVENT_SUBMENU_OPENED(1),
  NATIVE_MENU_ITEM_EVENT_SUBMENU_CLOSED(2);

  final int value;
  const native_menu_item_event_type_t(this.value);

  static native_menu_item_event_type_t fromValue(int value) => switch (value) {
    0 => NATIVE_MENU_ITEM_EVENT_CLICKED,
    1 => NATIVE_MENU_ITEM_EVENT_SUBMENU_OPENED,
    2 => NATIVE_MENU_ITEM_EVENT_SUBMENU_CLOSED,
    _ => throw ArgumentError(
      "Unknown value for native_menu_item_event_type_t: $value",
    ),
  };
}

/// Event types for menu events
enum native_menu_event_type_t {
  NATIVE_MENU_EVENT_OPENED(0),
  NATIVE_MENU_EVENT_CLOSED(1);

  final int value;
  const native_menu_event_type_t(this.value);

  static native_menu_event_type_t fromValue(int value) => switch (value) {
    0 => NATIVE_MENU_EVENT_OPENED,
    1 => NATIVE_MENU_EVENT_CLOSED,
    _ => throw ArgumentError(
      "Unknown value for native_menu_event_type_t: $value",
    ),
  };
}

/// Opaque handles for menu objects
typedef native_menu_t = ffi.Pointer<ffi.Void>;

/// Event listener registration function types
typedef native_menu_item_event_callback_t =
    ffi.Pointer<ffi.NativeFunction<native_menu_item_event_callback_tFunction>>;
typedef native_menu_item_event_callback_tFunction =
    ffi.Void Function(
      ffi.Pointer<ffi.Void> event,
      ffi.Pointer<ffi.Void> user_data,
    );
typedef Dartnative_menu_item_event_callback_tFunction =
    void Function(ffi.Pointer<ffi.Void> event, ffi.Pointer<ffi.Void> user_data);
typedef native_menu_event_callback_t =
    ffi.Pointer<ffi.NativeFunction<native_menu_event_callback_tFunction>>;
typedef native_menu_event_callback_tFunction =
    ffi.Void Function(
      ffi.Pointer<ffi.Void> event,
      ffi.Pointer<ffi.Void> user_data,
    );
typedef Dartnative_menu_event_callback_tFunction =
    void Function(ffi.Pointer<ffi.Void> event, ffi.Pointer<ffi.Void> user_data);

/// Opaque handle type
typedef native_preferences_t = ffi.Pointer<ffi.Void>;

/// Opaque handle type
typedef native_secure_storage_t = ffi.Pointer<ffi.Void>;

/// Tray icon clicked event
final class native_tray_icon_clicked_event_t extends ffi.Struct {
  @native_tray_icon_id_t()
  external int tray_icon_id;
}

/// Tray icon identifier
typedef native_tray_icon_id_t = ffi.Long;
typedef Dartnative_tray_icon_id_t = int;

/// Tray icon right-clicked event
final class native_tray_icon_right_clicked_event_t extends ffi.Struct {
  @native_tray_icon_id_t()
  external int tray_icon_id;
}

/// Tray icon double-clicked event
final class native_tray_icon_double_clicked_event_t extends ffi.Struct {
  @native_tray_icon_id_t()
  external int tray_icon_id;
}

/// Event types for tray icon events
enum native_tray_icon_event_type_t {
  NATIVE_TRAY_ICON_EVENT_CLICKED(0),
  NATIVE_TRAY_ICON_EVENT_RIGHT_CLICKED(1),
  NATIVE_TRAY_ICON_EVENT_DOUBLE_CLICKED(2);

  final int value;
  const native_tray_icon_event_type_t(this.value);

  static native_tray_icon_event_type_t fromValue(int value) => switch (value) {
    0 => NATIVE_TRAY_ICON_EVENT_CLICKED,
    1 => NATIVE_TRAY_ICON_EVENT_RIGHT_CLICKED,
    2 => NATIVE_TRAY_ICON_EVENT_DOUBLE_CLICKED,
    _ => throw ArgumentError(
      "Unknown value for native_tray_icon_event_type_t: $value",
    ),
  };
}

/// Opaque handle for tray icon objects
typedef native_tray_icon_t = ffi.Pointer<ffi.Void>;

/// Event callback function type
typedef native_tray_icon_event_callback_t =
    ffi.Pointer<ffi.NativeFunction<native_tray_icon_event_callback_tFunction>>;
typedef native_tray_icon_event_callback_tFunction =
    ffi.Void Function(
      ffi.Pointer<ffi.Void> event,
      ffi.Pointer<ffi.Void> user_data,
    );
typedef Dartnative_tray_icon_event_callback_tFunction =
    void Function(ffi.Pointer<ffi.Void> event, ffi.Pointer<ffi.Void> user_data);

/// Tray icon list structure
final class native_tray_icon_list_t extends ffi.Struct {
  external ffi.Pointer<native_tray_icon_t> tray_icons;

  @ffi.Size()
  external int count;
}

/// Window event types
enum native_window_event_type_t {
  NATIVE_WINDOW_EVENT_CREATED(0),
  NATIVE_WINDOW_EVENT_CLOSED(1),
  NATIVE_WINDOW_EVENT_FOCUSED(2),
  NATIVE_WINDOW_EVENT_BLURRED(3),
  NATIVE_WINDOW_EVENT_MINIMIZED(4),
  NATIVE_WINDOW_EVENT_MAXIMIZED(5),
  NATIVE_WINDOW_EVENT_RESTORED(6),
  NATIVE_WINDOW_EVENT_MOVED(7),
  NATIVE_WINDOW_EVENT_RESIZED(8);

  final int value;
  const native_window_event_type_t(this.value);

  static native_window_event_type_t fromValue(int value) => switch (value) {
    0 => NATIVE_WINDOW_EVENT_CREATED,
    1 => NATIVE_WINDOW_EVENT_CLOSED,
    2 => NATIVE_WINDOW_EVENT_FOCUSED,
    3 => NATIVE_WINDOW_EVENT_BLURRED,
    4 => NATIVE_WINDOW_EVENT_MINIMIZED,
    5 => NATIVE_WINDOW_EVENT_MAXIMIZED,
    6 => NATIVE_WINDOW_EVENT_RESTORED,
    7 => NATIVE_WINDOW_EVENT_MOVED,
    8 => NATIVE_WINDOW_EVENT_RESIZED,
    _ => throw ArgumentError(
      "Unknown value for native_window_event_type_t: $value",
    ),
  };
}

/// Window event structure
final class native_window_event_t extends ffi.Struct {
  @ffi.UnsignedInt()
  external int type;

  @native_window_id_t()
  external int window_id;

  external UnnamedUnion1 data;
}

final class UnnamedUnion1 extends ffi.Union {
  external UnnamedStruct1 moved;

  external UnnamedStruct2 resized;
}

final class UnnamedStruct1 extends ffi.Struct {
  external native_point_t position;
}

final class UnnamedStruct2 extends ffi.Struct {
  external native_size_t size;
}

/// Window event callback function type
typedef native_window_event_callback_t =
    ffi.Pointer<ffi.NativeFunction<native_window_event_callback_tFunction>>;
typedef native_window_event_callback_tFunction =
    ffi.Void Function(
      ffi.Pointer<native_window_event_t> event,
      ffi.Pointer<ffi.Void> user_data,
    );
typedef Dartnative_window_event_callback_tFunction =
    void Function(
      ffi.Pointer<native_window_event_t> event,
      ffi.Pointer<ffi.Void> user_data,
    );
