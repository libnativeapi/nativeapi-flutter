// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `nativeapi capi`.
///
/// Regenerate bindings with `dart run ffigen --config ffigen.yaml`.
///
class CNativeApiBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
  _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  CNativeApiBindings(ffi.DynamicLibrary dynamicLibrary)
    : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  CNativeApiBindings.fromLookup(
    ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) lookup,
  ) : _lookup = lookup;

  /// @brief Enables system accessibility features
  ///
  /// This function activates accessibility functionality across the system.
  /// The operation is idempotent - calling it multiple times has the same
  /// effect as calling it once.
  ///
  /// @note This operation may require system permissions depending on the
  /// platform implementation.
  void native_accessibility_manager_enable() {
    return _native_accessibility_manager_enable();
  }

  late final _native_accessibility_manager_enablePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
        'native_accessibility_manager_enable',
      );
  late final _native_accessibility_manager_enable =
      _native_accessibility_manager_enablePtr.asFunction<void Function()>();

  /// @brief Checks if accessibility features are currently enabled
  ///
  /// @return true if accessibility is enabled, false otherwise
  ///
  /// This function provides a quick way to query the current state of
  /// accessibility features without modifying the system state.
  bool native_accessibility_manager_is_enabled() {
    return _native_accessibility_manager_is_enabled();
  }

  late final _native_accessibility_manager_is_enabledPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>(
        'native_accessibility_manager_is_enabled',
      );
  late final _native_accessibility_manager_is_enabled =
      _native_accessibility_manager_is_enabledPtr.asFunction<bool Function()>();

  /// Basic identification getters
  ffi.Pointer<ffi.Char> native_display_get_id(native_display_t display) {
    return _native_display_get_id(display);
  }

  late final _native_display_get_idPtr =
      _lookup<
        ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(native_display_t)>
      >('native_display_get_id');
  late final _native_display_get_id = _native_display_get_idPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(native_display_t)>();

  ffi.Pointer<ffi.Char> native_display_get_name(native_display_t display) {
    return _native_display_get_name(display);
  }

  late final _native_display_get_namePtr =
      _lookup<
        ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(native_display_t)>
      >('native_display_get_name');
  late final _native_display_get_name = _native_display_get_namePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(native_display_t)>();

  /// Physical properties getters
  native_point_t native_display_get_position(native_display_t display) {
    return _native_display_get_position(display);
  }

  late final _native_display_get_positionPtr =
      _lookup<ffi.NativeFunction<native_point_t Function(native_display_t)>>(
        'native_display_get_position',
      );
  late final _native_display_get_position = _native_display_get_positionPtr
      .asFunction<native_point_t Function(native_display_t)>();

  native_size_t native_display_get_size(native_display_t display) {
    return _native_display_get_size(display);
  }

  late final _native_display_get_sizePtr =
      _lookup<ffi.NativeFunction<native_size_t Function(native_display_t)>>(
        'native_display_get_size',
      );
  late final _native_display_get_size = _native_display_get_sizePtr
      .asFunction<native_size_t Function(native_display_t)>();

  native_rectangle_t native_display_get_work_area(native_display_t display) {
    return _native_display_get_work_area(display);
  }

  late final _native_display_get_work_areaPtr =
      _lookup<
        ffi.NativeFunction<native_rectangle_t Function(native_display_t)>
      >('native_display_get_work_area');
  late final _native_display_get_work_area = _native_display_get_work_areaPtr
      .asFunction<native_rectangle_t Function(native_display_t)>();

  double native_display_get_scale_factor(native_display_t display) {
    return _native_display_get_scale_factor(display);
  }

  late final _native_display_get_scale_factorPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(native_display_t)>>(
        'native_display_get_scale_factor',
      );
  late final _native_display_get_scale_factor =
      _native_display_get_scale_factorPtr
          .asFunction<double Function(native_display_t)>();

  /// Additional properties getters
  bool native_display_is_primary(native_display_t display) {
    return _native_display_is_primary(display);
  }

  late final _native_display_is_primaryPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(native_display_t)>>(
        'native_display_is_primary',
      );
  late final _native_display_is_primary = _native_display_is_primaryPtr
      .asFunction<bool Function(native_display_t)>();

  native_display_orientation_t native_display_get_orientation(
    native_display_t display,
  ) {
    return native_display_orientation_t.fromValue(
      _native_display_get_orientation(display),
    );
  }

  late final _native_display_get_orientationPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(native_display_t)>>(
        'native_display_get_orientation',
      );
  late final _native_display_get_orientation =
      _native_display_get_orientationPtr
          .asFunction<int Function(native_display_t)>();

  int native_display_get_refresh_rate(native_display_t display) {
    return _native_display_get_refresh_rate(display);
  }

  late final _native_display_get_refresh_ratePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(native_display_t)>>(
        'native_display_get_refresh_rate',
      );
  late final _native_display_get_refresh_rate =
      _native_display_get_refresh_ratePtr
          .asFunction<int Function(native_display_t)>();

  int native_display_get_bit_depth(native_display_t display) {
    return _native_display_get_bit_depth(display);
  }

  late final _native_display_get_bit_depthPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(native_display_t)>>(
        'native_display_get_bit_depth',
      );
  late final _native_display_get_bit_depth = _native_display_get_bit_depthPtr
      .asFunction<int Function(native_display_t)>();

  /// Hardware information getters
  ffi.Pointer<ffi.Char> native_display_get_manufacturer(
    native_display_t display,
  ) {
    return _native_display_get_manufacturer(display);
  }

  late final _native_display_get_manufacturerPtr =
      _lookup<
        ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(native_display_t)>
      >('native_display_get_manufacturer');
  late final _native_display_get_manufacturer =
      _native_display_get_manufacturerPtr
          .asFunction<ffi.Pointer<ffi.Char> Function(native_display_t)>();

  ffi.Pointer<ffi.Char> native_display_get_model(native_display_t display) {
    return _native_display_get_model(display);
  }

  late final _native_display_get_modelPtr =
      _lookup<
        ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(native_display_t)>
      >('native_display_get_model');
  late final _native_display_get_model = _native_display_get_modelPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(native_display_t)>();

  ffi.Pointer<ffi.Char> native_display_get_serial_number(
    native_display_t display,
  ) {
    return _native_display_get_serial_number(display);
  }

  late final _native_display_get_serial_numberPtr =
      _lookup<
        ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(native_display_t)>
      >('native_display_get_serial_number');
  late final _native_display_get_serial_number =
      _native_display_get_serial_numberPtr
          .asFunction<ffi.Pointer<ffi.Char> Function(native_display_t)>();

  /// Platform-specific functions
  ffi.Pointer<ffi.Void> native_display_get_native_object(
    native_display_t display,
  ) {
    return _native_display_get_native_object(display);
  }

  late final _native_display_get_native_objectPtr =
      _lookup<
        ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(native_display_t)>
      >('native_display_get_native_object');
  late final _native_display_get_native_object =
      _native_display_get_native_objectPtr
          .asFunction<ffi.Pointer<ffi.Void> Function(native_display_t)>();

  /// Memory management
  void native_display_free_string(ffi.Pointer<ffi.Char> str) {
    return _native_display_free_string(str);
  }

  late final _native_display_free_stringPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
        'native_display_free_string',
      );
  late final _native_display_free_string = _native_display_free_stringPtr
      .asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  void native_display_free(native_display_t display) {
    return _native_display_free(display);
  }

  late final _native_display_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(native_display_t)>>(
        'native_display_free',
      );
  late final _native_display_free = _native_display_freePtr
      .asFunction<void Function(native_display_t)>();

  void native_display_list_free(ffi.Pointer<native_display_list_t> list) {
    return _native_display_list_free(list);
  }

  late final _native_display_list_freePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<native_display_list_t>)
        >
      >('native_display_list_free');
  late final _native_display_list_free = _native_display_list_freePtr
      .asFunction<void Function(ffi.Pointer<native_display_list_t>)>();

  native_display_list_t native_display_manager_get_all() {
    return _native_display_manager_get_all();
  }

  late final _native_display_manager_get_allPtr =
      _lookup<ffi.NativeFunction<native_display_list_t Function()>>(
        'native_display_manager_get_all',
      );
  late final _native_display_manager_get_all =
      _native_display_manager_get_allPtr
          .asFunction<native_display_list_t Function()>();

  native_display_t native_display_manager_get_primary() {
    return _native_display_manager_get_primary();
  }

  late final _native_display_manager_get_primaryPtr =
      _lookup<ffi.NativeFunction<native_display_t Function()>>(
        'native_display_manager_get_primary',
      );
  late final _native_display_manager_get_primary =
      _native_display_manager_get_primaryPtr
          .asFunction<native_display_t Function()>();

  native_point_t native_display_manager_get_cursor_position() {
    return _native_display_manager_get_cursor_position();
  }

  late final _native_display_manager_get_cursor_positionPtr =
      _lookup<ffi.NativeFunction<native_point_t Function()>>(
        'native_display_manager_get_cursor_position',
      );
  late final _native_display_manager_get_cursor_position =
      _native_display_manager_get_cursor_positionPtr
          .asFunction<native_point_t Function()>();
}

/// Display orientation enumeration
enum native_display_orientation_t {
  NATIVE_DISPLAY_ORIENTATION_PORTRAIT(0),
  NATIVE_DISPLAY_ORIENTATION_LANDSCAPE(90),
  NATIVE_DISPLAY_ORIENTATION_PORTRAIT_FLIPPED(180),
  NATIVE_DISPLAY_ORIENTATION_LANDSCAPE_FLIPPED(270);

  final int value;
  const native_display_orientation_t(this.value);

  static native_display_orientation_t fromValue(int value) => switch (value) {
    0 => NATIVE_DISPLAY_ORIENTATION_PORTRAIT,
    90 => NATIVE_DISPLAY_ORIENTATION_LANDSCAPE,
    180 => NATIVE_DISPLAY_ORIENTATION_PORTRAIT_FLIPPED,
    270 => NATIVE_DISPLAY_ORIENTATION_LANDSCAPE_FLIPPED,
    _ => throw ArgumentError(
      "Unknown value for native_display_orientation_t: $value",
    ),
  };
}

final class native_display_handle extends ffi.Opaque {}

/// Display list structure
final class native_display_list_t extends ffi.Struct {
  external ffi.Pointer<native_display_t> displays;

  @ffi.Long()
  external int count;
}

/// Opaque display handle
typedef native_display_t = ffi.Pointer<native_display_handle>;

/// Representation of a point
final class native_point_t extends ffi.Struct {
  @ffi.Double()
  external double x;

  @ffi.Double()
  external double y;
}

/// Representation of a point
final class native_size_t extends ffi.Struct {
  @ffi.Double()
  external double width;

  @ffi.Double()
  external double height;
}

/// Representation of a rectangle
final class native_rectangle_t extends ffi.Struct {
  @ffi.Double()
  external double x;

  @ffi.Double()
  external double y;

  @ffi.Double()
  external double width;

  @ffi.Double()
  external double height;
}
